{"ast":null,"code":"import { base64Map } from \"./base64Map.js\";\nimport { stringPad } from \"./stringPad.js\";\nimport { reverseVersion } from \"./reverseVersion.js\";\nimport { padVersion } from \"./padVersion.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\n\nexport function encodeVersion(semVer) {\n  let strResult = ''; // support x.y or x.y.z by using 'parts' as a variable\n\n  const parts = semVer.split('.').length;\n  const paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n  // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n\n  const reversedSemver = reverseVersion(semVer); // Pad to two spaces, 15.5.1 -> 15.05.01\n\n  const paddedSemver = padVersion(reversedSemver); // turn 15.05.01 to a string '150501' then to a number 150501\n\n  const num = parseInt(paddedSemver.split('.').join('')); // Represent as binary, add left padding to 12 or 18 characters.\n  // 150,501 -> 100100101111100101\n\n  let paddedBinary = num.toString(2);\n  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0'); // Stop in case an invalid version number was provided\n  // paddedBinary must be built from sections of 6 bits\n\n  if (paddedBinary.length % 6 !== 0) {\n    throw 'Version must be smaller than 43.21.26)';\n  } // turn every 6 bits into a character using the base64Map\n\n\n  paddedBinary.match(/.{1,6}/g).forEach(bitString => {\n    // console.log(bitString);\n    strResult += base64Map[bitString];\n  });\n  return strResult;\n}","map":{"version":3,"names":["base64Map","stringPad","reverseVersion","padVersion","encodeVersion","semVer","strResult","parts","split","length","paddedStringLength","reversedSemver","paddedSemver","num","parseInt","join","paddedBinary","toString","match","forEach","bitString"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/url-gen/sdkAnalytics/encodeVersion.js"],"sourcesContent":["import { base64Map } from \"./base64Map.js\";\nimport { stringPad } from \"./stringPad.js\";\nimport { reverseVersion } from \"./reverseVersion.js\";\nimport { padVersion } from \"./padVersion.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nexport function encodeVersion(semVer) {\n    let strResult = '';\n    // support x.y or x.y.z by using 'parts' as a variable\n    const parts = semVer.split('.').length;\n    const paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n    // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n    const reversedSemver = reverseVersion(semVer);\n    // Pad to two spaces, 15.5.1 -> 15.05.01\n    const paddedSemver = padVersion(reversedSemver);\n    // turn 15.05.01 to a string '150501' then to a number 150501\n    const num = parseInt(paddedSemver.split('.').join(''));\n    // Represent as binary, add left padding to 12 or 18 characters.\n    // 150,501 -> 100100101111100101\n    let paddedBinary = num.toString(2);\n    paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n    // Stop in case an invalid version number was provided\n    // paddedBinary must be built from sections of 6 bits\n    if (paddedBinary.length % 6 !== 0) {\n        throw 'Version must be smaller than 43.21.26)';\n    }\n    // turn every 6 bits into a character using the base64Map\n    paddedBinary.match(/.{1,6}/g).forEach((bitString) => {\n        // console.log(bitString);\n        strResult += base64Map[bitString];\n    });\n    return strResult;\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,gBAA1B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;EAClC,IAAIC,SAAS,GAAG,EAAhB,CADkC,CAElC;;EACA,MAAMC,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBC,MAAhC;EACA,MAAMC,kBAAkB,GAAGH,KAAK,GAAG,CAAnC,CAJkC,CAII;EACtC;;EACA,MAAMI,cAAc,GAAGT,cAAc,CAACG,MAAD,CAArC,CANkC,CAOlC;;EACA,MAAMO,YAAY,GAAGT,UAAU,CAACQ,cAAD,CAA/B,CARkC,CASlC;;EACA,MAAME,GAAG,GAAGC,QAAQ,CAACF,YAAY,CAACJ,KAAb,CAAmB,GAAnB,EAAwBO,IAAxB,CAA6B,EAA7B,CAAD,CAApB,CAVkC,CAWlC;EACA;;EACA,IAAIC,YAAY,GAAGH,GAAG,CAACI,QAAJ,CAAa,CAAb,CAAnB;EACAD,YAAY,GAAGf,SAAS,CAACe,YAAD,EAAeN,kBAAf,EAAmC,GAAnC,CAAxB,CAdkC,CAelC;EACA;;EACA,IAAIM,YAAY,CAACP,MAAb,GAAsB,CAAtB,KAA4B,CAAhC,EAAmC;IAC/B,MAAM,wCAAN;EACH,CAnBiC,CAoBlC;;;EACAO,YAAY,CAACE,KAAb,CAAmB,SAAnB,EAA8BC,OAA9B,CAAuCC,SAAD,IAAe;IACjD;IACAd,SAAS,IAAIN,SAAS,CAACoB,SAAD,CAAtB;EACH,CAHD;EAIA,OAAOd,SAAP;AACH"},"metadata":{},"sourceType":"module"}