{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\n * @extends EffectActionWithLevel\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass ColorizeEffectAction extends EffectActionWithLevel {\n  /**\n   * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\n   * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\n   * @return {this}\n   */\n  color(color) {\n    this._actionModel.color = color;\n    return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      level,\n      color\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(actionType, level);\n    color && result.color(color);\n    return result;\n  }\n\n}\n\nexport { ColorizeEffectAction };","map":{"version":3,"names":["QualifierValue","Qualifier","prepareColor","EffectActionWithLevel","ColorizeEffectAction","color","_actionModel","addQualifier","fromJson","actionModel","actionType","level","result"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Colorize.js"],"sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\n/**\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\n * @extends EffectActionWithLevel\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ColorizeEffectAction extends EffectActionWithLevel {\n    /**\n     * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\n     * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\n     * @return {this}\n     */\n    color(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, level, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, level);\n        color && result.color(color);\n        return result;\n    }\n}\nexport { ColorizeEffectAction };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA,SAASC,qBAAT,QAAsC,0CAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAN,SAAmCD,qBAAnC,CAAyD;EACrD;AACJ;AACA;AACA;AACA;EACIE,KAAK,CAACA,KAAD,EAAQ;IACT,KAAKC,YAAL,CAAkBD,KAAlB,GAA0BA,KAA1B;IACA,OAAO,KAAKE,YAAL,CAAkB,IAAIN,SAAJ,CAAc,IAAd,EAAoB,IAAID,cAAJ,CAAmBE,YAAY,CAACG,KAAD,CAA/B,CAApB,CAAlB,CAAP;EACH;;EACc,OAARG,QAAQ,CAACC,WAAD,EAAc;IACzB,MAAM;MAAEC,UAAF;MAAcC,KAAd;MAAqBN;IAArB,IAA+BI,WAArC,CADyB,CAEzB;IACA;;IACA,MAAMG,MAAM,GAAG,IAAI,IAAJ,CAASF,UAAT,EAAqBC,KAArB,CAAf;IACAN,KAAK,IAAIO,MAAM,CAACP,KAAP,CAAaA,KAAb,CAAT;IACA,OAAOO,MAAP;EACH;;AAjBoD;;AAmBzD,SAASR,oBAAT"},"metadata":{},"sourceType":"module"}