{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\n/**\n * @description Applies a cartoon effect to an image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass CartoonifyEffect extends Action {\n  constructor(effectName, strength) {\n    // We don't pass level in the constructor, we'll build it in the prepareParam\n    super();\n    this._actionModel = {};\n    this.cartoonifyStrength = strength;\n    this.effectName = effectName;\n    this._actionModel.actionType = effectName;\n  }\n  /**\n   * @description Sets the thickness of the lines.\n   * @param {number} lineStrength The thickness of the lines. (Range: 0 to 100, Server default: 50)\n   * @return {this}\n   */\n\n\n  lineStrength(lineStrength) {\n    this.cartoonifyStrength = lineStrength;\n    this._actionModel.lineStrength = lineStrength;\n    return this;\n  }\n  /**\n   * @description Achieves a black and white cartoon effect.\n   * @return {this}\n   */\n\n\n  blackwhite() {\n    this._actionModel.blackAndWhite = true;\n    this.colorReduction = 'bw';\n    return this;\n  }\n  /**\n   * @description\n   * Sets the decrease in the number of colors and corresponding saturation boost of the remaining colors. <br/>\n   * Higher reduction values result in a less realistic look.\n   * @param {number } level The decrease in the number of colors and corresponding saturation boost of the remaining colors. (Range: 0 to 100, Server default: automatically adjusts according to the line_strength value). Set to 'bw' for a black and white cartoon effect.\n   * @return {this}\n   */\n\n\n  colorReductionLevel(level) {\n    this._actionModel.colorReductionLevel = level;\n    this.colorReduction = level;\n    return this;\n  }\n\n  prepareQualifiers() {\n    this.addQualifier(new Qualifier('e', new QualifierValue([this.effectName, this.cartoonifyStrength, this.colorReduction])));\n    return;\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      lineStrength,\n      blackAndWhite,\n      colorReductionLevel\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(actionType, lineStrength);\n    blackAndWhite && result.blackwhite();\n    colorReductionLevel && result.colorReductionLevel(colorReductionLevel);\n    lineStrength && result.lineStrength(lineStrength);\n    return result;\n  }\n\n}\n\nexport { CartoonifyEffect };","map":{"version":3,"names":["Qualifier","QualifierValue","Action","CartoonifyEffect","constructor","effectName","strength","_actionModel","cartoonifyStrength","actionType","lineStrength","blackwhite","blackAndWhite","colorReduction","colorReductionLevel","level","prepareQualifiers","addQualifier","fromJson","actionModel","result"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Cartoonify.js"],"sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\n/**\n * @description Applies a cartoon effect to an image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass CartoonifyEffect extends Action {\n    constructor(effectName, strength) {\n        // We don't pass level in the constructor, we'll build it in the prepareParam\n        super();\n        this._actionModel = {};\n        this.cartoonifyStrength = strength;\n        this.effectName = effectName;\n        this._actionModel.actionType = effectName;\n    }\n    /**\n     * @description Sets the thickness of the lines.\n     * @param {number} lineStrength The thickness of the lines. (Range: 0 to 100, Server default: 50)\n     * @return {this}\n     */\n    lineStrength(lineStrength) {\n        this.cartoonifyStrength = lineStrength;\n        this._actionModel.lineStrength = lineStrength;\n        return this;\n    }\n    /**\n     * @description Achieves a black and white cartoon effect.\n     * @return {this}\n     */\n    blackwhite() {\n        this._actionModel.blackAndWhite = true;\n        this.colorReduction = 'bw';\n        return this;\n    }\n    /**\n     * @description\n     * Sets the decrease in the number of colors and corresponding saturation boost of the remaining colors. <br/>\n     * Higher reduction values result in a less realistic look.\n     * @param {number } level The decrease in the number of colors and corresponding saturation boost of the remaining colors. (Range: 0 to 100, Server default: automatically adjusts according to the line_strength value). Set to 'bw' for a black and white cartoon effect.\n     * @return {this}\n     */\n    colorReductionLevel(level) {\n        this._actionModel.colorReductionLevel = level;\n        this.colorReduction = level;\n        return this;\n    }\n    prepareQualifiers() {\n        this.addQualifier(new Qualifier('e', new QualifierValue([this.effectName, this.cartoonifyStrength, this.colorReduction])));\n        return;\n    }\n    static fromJson(actionModel) {\n        const { actionType, lineStrength, blackAndWhite, colorReductionLevel } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, lineStrength);\n        blackAndWhite && result.blackwhite();\n        colorReductionLevel && result.colorReductionLevel(colorReductionLevel);\n        lineStrength && result.lineStrength(lineStrength);\n        return result;\n    }\n}\nexport { CartoonifyEffect };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uCAA1B;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAN,SAA+BD,MAA/B,CAAsC;EAClCE,WAAW,CAACC,UAAD,EAAaC,QAAb,EAAuB;IAC9B;IACA;IACA,KAAKC,YAAL,GAAoB,EAApB;IACA,KAAKC,kBAAL,GAA0BF,QAA1B;IACA,KAAKD,UAAL,GAAkBA,UAAlB;IACA,KAAKE,YAAL,CAAkBE,UAAlB,GAA+BJ,UAA/B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIK,YAAY,CAACA,YAAD,EAAe;IACvB,KAAKF,kBAAL,GAA0BE,YAA1B;IACA,KAAKH,YAAL,CAAkBG,YAAlB,GAAiCA,YAAjC;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIC,UAAU,GAAG;IACT,KAAKJ,YAAL,CAAkBK,aAAlB,GAAkC,IAAlC;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIC,mBAAmB,CAACC,KAAD,EAAQ;IACvB,KAAKR,YAAL,CAAkBO,mBAAlB,GAAwCC,KAAxC;IACA,KAAKF,cAAL,GAAsBE,KAAtB;IACA,OAAO,IAAP;EACH;;EACDC,iBAAiB,GAAG;IAChB,KAAKC,YAAL,CAAkB,IAAIjB,SAAJ,CAAc,GAAd,EAAmB,IAAIC,cAAJ,CAAmB,CAAC,KAAKI,UAAN,EAAkB,KAAKG,kBAAvB,EAA2C,KAAKK,cAAhD,CAAnB,CAAnB,CAAlB;IACA;EACH;;EACc,OAARK,QAAQ,CAACC,WAAD,EAAc;IACzB,MAAM;MAAEV,UAAF;MAAcC,YAAd;MAA4BE,aAA5B;MAA2CE;IAA3C,IAAmEK,WAAzE,CADyB,CAEzB;IACA;;IACA,MAAMC,MAAM,GAAG,IAAI,IAAJ,CAASX,UAAT,EAAqBC,YAArB,CAAf;IACAE,aAAa,IAAIQ,MAAM,CAACT,UAAP,EAAjB;IACAG,mBAAmB,IAAIM,MAAM,CAACN,mBAAP,CAA2BA,mBAA3B,CAAvB;IACAJ,YAAY,IAAIU,MAAM,CAACV,YAAP,CAAoBA,YAApB,CAAhB;IACA,OAAOU,MAAP;EACH;;AArDiC;;AAuDtC,SAASjB,gBAAT"},"metadata":{},"sourceType":"module"}