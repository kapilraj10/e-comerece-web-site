{"ast":null,"code":"import { BaseTextSource } from \"./BaseTextSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\n\nclass SubtitlesSource extends BaseTextSource {\n  constructor(fileName) {\n    super(fileName);\n    this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n\n    this._qualifierModel = {\n      sourceType: 'subtitles',\n      publicId: fileName\n    };\n  }\n  /**\n   * @description Set the textStyle for the subtitles layer\n   * @param {TextStyle} textStyle\n   */\n\n\n  textStyle(textStyle) {\n    this._textStyle = textStyle;\n    this._qualifierModel.textStyle = textStyle.toJson();\n    return this;\n  }\n  /**\n   *\n   * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n   * Subtitle file names require a different encoding than texts\n   * @param text\n   * @example\n   * encodeText('foo/bar'); // -> foo:bar\n   */\n\n\n  encodeText(text) {\n    return text.replace(/\\//g, ':');\n  }\n\n}\n\nexport { SubtitlesSource };","map":{"version":3,"names":["BaseTextSource","SubtitlesSource","constructor","fileName","type","_qualifierModel","sourceType","publicId","textStyle","_textStyle","toJson","encodeText","text","replace"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/SubtitlesSource.js"],"sourcesContent":["import { BaseTextSource } from \"./BaseTextSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n    constructor(fileName) {\n        super(fileName);\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n        this._qualifierModel = {\n            sourceType: 'subtitles',\n            publicId: fileName\n        };\n    }\n    /**\n     * @description Set the textStyle for the subtitles layer\n     * @param {TextStyle} textStyle\n     */\n    textStyle(textStyle) {\n        this._textStyle = textStyle;\n        this._qualifierModel.textStyle = textStyle.toJson();\n        return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n    encodeText(text) {\n        return text.replace(/\\//g, ':');\n    }\n}\nexport { SubtitlesSource };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,qBAA/B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAN,SAA8BD,cAA9B,CAA6C;EACzCE,WAAW,CAACC,QAAD,EAAW;IAClB,MAAMA,QAAN;IACA,KAAKC,IAAL,GAAY,WAAZ,CAFkB,CAEO;;IACzB,KAAKC,eAAL,GAAuB;MACnBC,UAAU,EAAE,WADO;MAEnBC,QAAQ,EAAEJ;IAFS,CAAvB;EAIH;EACD;AACJ;AACA;AACA;;;EACIK,SAAS,CAACA,SAAD,EAAY;IACjB,KAAKC,UAAL,GAAkBD,SAAlB;IACA,KAAKH,eAAL,CAAqBG,SAArB,GAAiCA,SAAS,CAACE,MAAV,EAAjC;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,UAAU,CAACC,IAAD,EAAO;IACb,OAAOA,IAAI,CAACC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;EACH;;AA5BwC;;AA8B7C,SAASZ,eAAT"},"metadata":{},"sourceType":"module"}