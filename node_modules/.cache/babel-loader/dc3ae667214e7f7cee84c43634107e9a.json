{"ast":null,"code":"/**\n * @description Contains functions to select the rotation mode.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\n * @memberOf Qualifiers\n * @namespace RotationMode\n * @see Visit {@link Actions.Rotate|Rotate Action} for an example\n */\nimport { RotationModeQualifierValue } from \"./rotate/RotationModeQualifierValue.js\";\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees clockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\n\nfunction autoRight() {\n  return new RotationModeQualifierValue('auto_right');\n}\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees counterclockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\n\n\nfunction autoLeft() {\n  return new RotationModeQualifierValue('auto_left');\n}\n/**\n * @summary qualifier\n * @description Vertical mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\n\n\nfunction verticalFlip() {\n  return new RotationModeQualifierValue('vflip');\n}\n/**\n * @summary qualifier\n * @description Horizontal mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\n\n\nfunction horizontalFlip() {\n  return new RotationModeQualifierValue('hflip');\n}\n/**\n * @summary qualifier\n * @description By default, the image is automatically rotated according to the EXIF data stored by the camera when the image\n *                           was taken. Set the angle to 'ignore' if you do not want the image to be automatically rotated.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\n\n\nfunction ignore() {\n  return new RotationModeQualifierValue('ignore');\n}\n\nconst RotationMode = {\n  autoLeft,\n  autoRight,\n  horizontalFlip,\n  ignore,\n  verticalFlip\n};\nexport { RotationMode, autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };","map":{"version":3,"names":["RotationModeQualifierValue","autoRight","autoLeft","verticalFlip","horizontalFlip","ignore","RotationMode"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/rotationMode.js"],"sourcesContent":["/**\n * @description Contains functions to select the rotation mode.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\n * @memberOf Qualifiers\n * @namespace RotationMode\n * @see Visit {@link Actions.Rotate|Rotate Action} for an example\n */\nimport { RotationModeQualifierValue } from \"./rotate/RotationModeQualifierValue.js\";\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees clockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction autoRight() {\n    return new RotationModeQualifierValue('auto_right');\n}\n/**\n * @summary qualifier\n * @description Rotate image 90 degrees counterclockwise only if the requested aspect ratio does not match the image's aspect ratio.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction autoLeft() {\n    return new RotationModeQualifierValue('auto_left');\n}\n/**\n * @summary qualifier\n * @description Vertical mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction verticalFlip() {\n    return new RotationModeQualifierValue('vflip');\n}\n/**\n * @summary qualifier\n * @description Horizontal mirror flip of the image.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction horizontalFlip() {\n    return new RotationModeQualifierValue('hflip');\n}\n/**\n * @summary qualifier\n * @description By default, the image is automatically rotated according to the EXIF data stored by the camera when the image\n *                           was taken. Set the angle to 'ignore' if you do not want the image to be automatically rotated.\n * @memberOf Qualifiers.RotationMode\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\n */\nfunction ignore() {\n    return new RotationModeQualifierValue('ignore');\n}\nconst RotationMode = { autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };\nexport { RotationMode, autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,0BAAT,QAA2C,wCAA3C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,GAAqB;EACjB,OAAO,IAAID,0BAAJ,CAA+B,YAA/B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,GAAoB;EAChB,OAAO,IAAIF,0BAAJ,CAA+B,WAA/B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,YAAT,GAAwB;EACpB,OAAO,IAAIH,0BAAJ,CAA+B,OAA/B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,cAAT,GAA0B;EACtB,OAAO,IAAIJ,0BAAJ,CAA+B,OAA/B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,MAAT,GAAkB;EACd,OAAO,IAAIL,0BAAJ,CAA+B,QAA/B,CAAP;AACH;;AACD,MAAMM,YAAY,GAAG;EAAEJ,QAAF;EAAYD,SAAZ;EAAuBG,cAAvB;EAAuCC,MAAvC;EAA+CF;AAA/C,CAArB;AACA,SAASG,YAAT,EAAuBJ,QAAvB,EAAiCD,SAAjC,EAA4CG,cAA5C,EAA4DC,MAA5D,EAAoEF,YAApE"},"metadata":{},"sourceType":"module"}