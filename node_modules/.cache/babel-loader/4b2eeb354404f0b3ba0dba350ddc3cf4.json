{"ast":null,"code":"import { BlurAction } from \"./effect/Blur.js\";\nimport { AccelerationEffectAction } from \"./effect/leveled/Accelerate.js\";\nimport { LoopEffectAction } from \"./effect/leveled/Loop.js\";\nimport { CartoonifyEffect } from \"./effect/Cartoonify.js\";\nimport { EffectOutline } from \"./effect/Outline.js\";\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction.js\";\nimport { MakeTransparentEffectAction } from \"./effect/leveled/MakeTransparent.js\";\nimport { VectorizeEffectAction } from \"./effect/Vectorize.js\";\nimport { SimulateColorBlindEffectAction } from \"./effect/SimulateColorBlind.js\";\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel.js\";\nimport { AssistColorBlindEffectAction } from \"./effect/AssistColorBlind.js\";\nimport { GradientFadeEffectAction } from \"./effect/GradientFade.js\";\nimport { FadeOutEffectAction } from \"./effect/leveled/FadeOut.js\";\nimport { ColorizeEffectAction } from \"./effect/Colorize.js\";\nimport { ShadowEffectAction } from \"./effect/Shadow.js\";\nimport { StyleTransfer } from \"./effect/StyleTransfer.js\";\nimport { DitherEffectAction } from \"./effect/Dither.js\";\nimport { DeshakeEffectAction } from \"./effect/leveled/Deshake.js\";\nimport { Pixelate } from \"./effect/pixelate/Pixelate.js\";\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength.js\";\nimport { BlackwhiteEffectAction } from \"./effect/leveled/Blackwhite.js\";\nimport { FadeInEffectAction } from \"./effect/leveled/FadeIn.js\";\nimport { RemoveBackgroundAction } from \"./effect/RemoveBackgroundAction.js\";\nimport { ThemeEffect } from \"./effect/Theme.js\";\nimport { BackgroundRemoval } from \"./effect/BackgroundRemoval.js\";\nimport { DropShadow } from \"./effect/DropShadow.js\";\nimport { GenerativeRemove } from \"./effect/GenerativeRemove.js\";\nimport { GenerativeReplace } from \"./effect/GenerativeReplace.js\";\nimport { GenerativeRecolor } from \"./effect/GenerativeRecolor.js\";\nimport { GenerativeBackgroundReplace } from \"./effect/GenerativeBackgroundReplace.js\";\nimport { Extract } from \"./effect/Extract.js\";\n/**\n * @summary action\n * @description Applies a blurring filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.BlurAction}\n */\n\nfunction blur(blurLevel) {\n  return new BlurAction(blurLevel);\n}\n/**\n * @summary action\n * @description Converts the image to gray-scale (multiple shades of gray).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction grayscale() {\n  return new SimpleEffectAction(\"grayscale\");\n}\n/**\n * @summary action\n * @description Changes the color scheme of the image to sepia.\n * @memberOf Actions.Effect\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\n\n\nfunction sepia(level) {\n  return new EffectActionWithLevel(\"sepia\", level);\n}\n/**\n * @summary action\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @param shadowLevel\n * @return {Actions.Effect.ShadowEffectAction}\n */\n\n\nfunction shadow(shadowLevel) {\n  return new ShadowEffectAction(\"shadow\", shadowLevel);\n}\n/**\n * @summary action\n * @description Applies a colorizing filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\n * @return {Actions.Effect.ColorizeEffectAction}\n */\n\n\nfunction colorize(colorizeLevel) {\n  return new ColorizeEffectAction(\"colorize\", colorizeLevel);\n}\n/**\n * @summary action\n * @description Applies an oilPaint filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\n\n\nfunction oilPaint(oilPaintLevel) {\n  return new EffectActionWithStrength(\"oil_paint\", oilPaintLevel);\n}\n/**\n * @summary action\n * @description Applies an artistic filter to the asset.\n * @memberOf Actions.Effect\n * @param {ArtisticFilterType | string} artisticFilterType\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction artisticFilter(artisticFilterType) {\n  return new SimpleEffectAction(\"art\", artisticFilterType);\n}\n/**\n * @summary action\n * @description Applies a cartoonify effect to the asset.\n * @memberOf Actions.Effect\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.CartoonifyEffect}\n */\n\n\nfunction cartoonify(cartoonifyLevel) {\n  return new CartoonifyEffect(\"cartoonify\", cartoonifyLevel);\n}\n/**\n * @summary action\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.EffectOutline}\n */\n\n\nfunction outline() {\n  return new EffectOutline();\n}\n/**\n * @summary action\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon|Neural Artwork Style Transfer}\n * @memberOf Actions.Effect\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/url-gen/qualifiers/sources`\n * @return {Actions.Effect.StyleTransfer}\n */\n\n\nfunction styleTransfer(imageSource) {\n  return new StyleTransfer(imageSource);\n}\n/**\n * @summary action\n * @description\n * Causes a video clip to play forwards and then backwards.\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction boomerang() {\n  return new SimpleEffectAction(\"boomerang\");\n}\n/**\n * @summary action\n * @description\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction advancedRedEye() {\n  return new SimpleEffectAction(\"adv_redeye\");\n}\n/**\n * @summary action\n * @description Converts the image to black and white.\n * @memberOf Actions.Effect\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.BlackwhiteEffectAction}\n */\n\n\nfunction blackwhite(level) {\n  return new BlackwhiteEffectAction(\"blackwhite\", level);\n}\n/**\n * @summary action\n * @description Negates the image colors (negative).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction negate() {\n  return new SimpleEffectAction(\"negate\");\n}\n/**\n * @summary action\n * @description Removes red eyes in the image.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction redEye() {\n  return new SimpleEffectAction(\"redeye\");\n}\n/**\n * @summary action\n * @description Plays the video or audio file in reverse.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction reverse() {\n  return new SimpleEffectAction(\"reverse\");\n}\n/**\n * @summary action\n * @description Changes the speed of the video playback.\n * @memberOf Actions.Effect\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\n * @return {Actions.Effect.AccelerationEffectAction}\n */\n\n\nfunction accelerate(speedIncreasePercent) {\n  return new AccelerationEffectAction(speedIncreasePercent);\n}\n/**\n * @summary action\n * @description\n * Fade in at the beginning of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeInEffectAction}\n */\n\n\nfunction fadeIn(fadeLength) {\n  return new FadeInEffectAction(fadeLength);\n}\n/**\n * @summary action\n * @description\n * Fade out at the end of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeoutEffectAction}\n */\n\n\nfunction fadeOut(fadeLength) {\n  return new FadeOutEffectAction(fadeLength);\n}\n/**\n * @summary action\n * @description\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\n * The total number of iterations is the number of additional loops plus one. <br/>\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n * @memberOf Actions.Effect\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\n * @return {Actions.Effect.LoopEffectAction}\n */\n\n\nfunction loop(additionalLoops) {\n  return new LoopEffectAction(\"loop\", additionalLoops);\n}\n/**\n * @summary action\n * @description\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\n *\n * @memberOf Actions.Effect\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n * @return {Actions.Effect.MakeTransparentEffectAction}\n */\n\n\nfunction makeTransparent(tolerance) {\n  return new MakeTransparentEffectAction(\"make_transparent\", tolerance);\n}\n/**\n * @summary action\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\n * @memberOf Actions.Effect\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\n\n\nfunction noise(percentage) {\n  return new EffectActionWithLevel(\"noise\", percentage);\n}\n/**\n * @summary action\n * @description Applies a vignette effect.\n * @memberOf Actions.Effect\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\n\n\nfunction vignette(strength) {\n  return new EffectActionWithStrength(\"vignette\", strength);\n}\n/**\n * @summary action\n * @description\n * Applies an ordered dither filter to the image.\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/url-gen/qualifiers/dither} for ditherType.\n * @memberOf Actions.Effect\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\n * @return {Actions.Effect.DitherEffectAction}\n */\n\n\nfunction dither(ditherType) {\n  return new DitherEffectAction(\"ordered_dither\", ditherType);\n}\n/**\n * @summary action\n * @description\n * Vectorizes the image.\n * Notes:\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.VectorizeEffectAction}\n */\n\n\nfunction vectorize() {\n  return new VectorizeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies a gradient fade effect from one edge of the image.\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\n * To apply different amounts of fade to multiple edges, use chained fade effects.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GradientFadeEffectAction}\n */\n\n\nfunction gradientFade() {\n  return new GradientFadeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.AssistColorBlindEffectAction}\n */\n\n\nfunction assistColorBlind() {\n  return new AssistColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\n */\n\n\nfunction simulateColorBlind() {\n  return new SimulateColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DeshakeEffectAction}\n */\n\n\nfunction deshake(pixels) {\n  return new DeshakeEffectAction(\"deshake\", pixels);\n}\n/**\n * @summary action\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\n * additional layer and specifying the transition effect\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction transition() {\n  return new SimpleEffectAction(\"transition\");\n}\n/**\n * @summary action\n * @description Applies a pixelatering filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.Pixelate}\n */\n\n\nfunction pixelate(squareSize) {\n  return new Pixelate(squareSize);\n}\n/**\n * @summary action\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\n *              Use when the background is a uniform color.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval|Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.RemoveBackgroundAction}\n */\n\n\nfunction removeBackground() {\n  return new RemoveBackgroundAction();\n}\n/**\n * @summary action\n * @description Uses the Cloudinary AI Background Removal add-on to make the background of an image transparent.</br>\n *              When combined with other transformations, this effect must be specified in the first component.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_background_removal|Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.BackgroundRemoval}\n */\n\n\nfunction backgroundRemoval() {\n  return new BackgroundRemoval();\n}\n/**\n * @summary action\n * @description Adds a shadow to the object in an image.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_dropshadow|Drop Shadow}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DropShadow}\n */\n\n\nfunction dropShadow() {\n  return new DropShadow();\n}\n/**\n * @summary action\n * @description Remove objects from an asset using Generative AI\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_remove|Generative Remove}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeRemove}\n */\n\n\nfunction generativeRemove() {\n  return new GenerativeRemove();\n}\n/**\n * @summary action\n * @description Uses generative AI to replace parts of your image with something else.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_replace|Generative Replace}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeReplace}\n */\n\n\nfunction generativeReplace() {\n  return new GenerativeReplace();\n}\n/**\n * @summary action\n * @description Uses generative AI to replace background of your image with something else.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_background_replace|Generative Background Replace}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeBackgroundReplace}\n */\n\n\nfunction generativeBackgroundReplace() {\n  return new GenerativeBackgroundReplace();\n}\n/**\n * @summary action\n * @description Extracts an area or multiple areas of an image, described in natural language.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_extract|Extract}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.Extract}\n */\n\n\nfunction extract(prompts) {\n  return new Extract(prompts);\n}\n/**\n * @summary action\n * @description Uses generative AI to recolor objects from your image.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_recolor|Generative Recolor}\n * @param {string | string[]} prompts\n * @param {SystemColors} color\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeRecolor}\n */\n\n\nfunction generativeRecolor(prompts, color) {\n  return new GenerativeRecolor(prompts, color);\n}\n/**\n * @summary action\n * @description\n * Uses generative AI to restore details in poor quality images\n * or images that may have become degraded through repeated processing and compression.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction generativeRestore() {\n  return new SimpleEffectAction(\"gen_restore\");\n}\n/**\n * @summary action\n * @description\n * Uses AI-based prediction to add fine detail while upscaling small images.\n * This 'super-resolution' feature scales each dimension by four, multiplying the total number of pixels by 16.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\n\n\nfunction upscale() {\n  return new SimpleEffectAction(\"upscale\");\n}\n/**\n *\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @param {SystemColors} color\n * @return {Actions.Effect.ThemeEffect}\n */\n\n\nfunction theme(color) {\n  return new ThemeEffect(color);\n}\n/**\n *\n * @description Uses AI to analyze an image and make adjustments to enhance the appeal of the image.\n * @return {Actions.Effect.Enhance}\n */\n\n\nfunction enhance() {\n  return new SimpleEffectAction(\"enhance\");\n}\n/**\n * @description Defines effects that you can apply to transform your assets.\n * @memberOf Actions\n * @namespace Effect\n * @example\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * // Import everything, or just the action you need for tree-shaking purposes\n * import {Effect, sepia} from \"@cloudinary/url-gen/actions/effect\";\n * import {ArtisticFilter, alDente} from \"@cloudinary/url-gen/qualifiers/artisticFilter\";\n * import {ShakeStrength, pixels16} from \"@cloudinary/url-gen/qualifiers/shakeStrength\";\n * import {cat, dog} from \"@cloudinary/url-gen/qualifiers/ForegroundObject\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * image.effect(Effect.advancedRedEye())\n * .effect(Effect.accelerate())\n * .effect(Effect.accelerate(100))\n * .effect(Effect.accelerate().rate(5))\n * .effect(Effect.boomerang())\n * .effect(Effect.blackwhite())\n * .effect(Effect.blackwhite(10))\n * .effect(Effect.blackwhite().threshold(20))\n * .effect(Effect.fadeIn(100))\n * .effect(Effect.fadeIn().duration(5))\n * .effect(Effect.fadeOut(100))\n * .effect(Effect.fadeOut().duration(5))\n * .effect(Effect.grayscale())\n * .effect(Effect.loop())\n * .effect(Effect.loop(100))\n * .effect(Effect.loop().additionalIterations(5))\n * .effect(Effect.makeTransparent())\n * .effect(Effect.makeTransparent(100))\n * .effect(Effect.makeTransparent().tolerance(5))\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\n * .effect(Effect.noise())\n * .effect(Effect.noise(100))\n * .effect(Effect.noise().level(5))\n * .effect(Effect.negate())\n * .effect(Effect.reverse())\n * .effect(Effect.redEye())\n * .effect(Effect.sepia())\n * .effect(Effect.sepia(100))\n * .effect(Effect.sepia().level(5))\n * .effect(Effect.vignette())\n * .effect(Effect.vignette(100))\n * .effect(Effect.vignette().strength(5))\n * .effect(Effect.deshake())\n * .effect(Effect.deshake(10))\n * .effect(Effect.artisticFilter(alDente())\n * .effect(Effect.deshake().shakeStrength(pixels16()))\n * .effect(Effect.backgroundRemoval().fineEdges(true).hints(cat(), dog())\n * .effect(Effect.generativeRemove().prompt(\"red car\").detectMultiple())\n * .effect(Effect.generativeRemove().region({x: 20, y: 200, width: 100, height: 100}))\n * .effect(Effect.generativeReplace().from(\"ceiling\").to(\"sunny sky\").preserveGeometry(true))\n */\n\n\nconst Effect = {\n  pixelate: pixelate,\n  deshake: deshake,\n  boomerang: boomerang,\n  advancedRedEye: advancedRedEye,\n  blackwhite,\n  negate: negate,\n  redEye: redEye,\n  reverse: reverse,\n  accelerate: accelerate,\n  fadeIn: fadeIn,\n  fadeOut: fadeOut,\n  loop: loop,\n  makeTransparent: makeTransparent,\n  noise: noise,\n  vignette: vignette,\n  blur: blur,\n  grayscale: grayscale,\n  sepia: sepia,\n  shadow: shadow,\n  colorize: colorize,\n  oilPaint: oilPaint,\n  artisticFilter: artisticFilter,\n  cartoonify: cartoonify,\n  outline: outline,\n  styleTransfer: styleTransfer,\n  gradientFade: gradientFade,\n  vectorize: vectorize,\n  assistColorBlind: assistColorBlind,\n  simulateColorBlind: simulateColorBlind,\n  transition: transition,\n  dither: dither,\n  removeBackground,\n  backgroundRemoval,\n  dropShadow,\n  generativeRemove,\n  generativeReplace,\n  generativeBackgroundReplace,\n  generativeRecolor,\n  generativeRestore,\n  upscale,\n  theme,\n  enhance,\n  extract\n};\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, backgroundRemoval, dropShadow, generativeRemove, generativeReplace, generativeBackgroundReplace, generativeRecolor, generativeRestore, upscale, theme, enhance, extract };","map":{"version":3,"names":["BlurAction","AccelerationEffectAction","LoopEffectAction","CartoonifyEffect","EffectOutline","SimpleEffectAction","MakeTransparentEffectAction","VectorizeEffectAction","SimulateColorBlindEffectAction","EffectActionWithLevel","AssistColorBlindEffectAction","GradientFadeEffectAction","FadeOutEffectAction","ColorizeEffectAction","ShadowEffectAction","StyleTransfer","DitherEffectAction","DeshakeEffectAction","Pixelate","EffectActionWithStrength","BlackwhiteEffectAction","FadeInEffectAction","RemoveBackgroundAction","ThemeEffect","BackgroundRemoval","DropShadow","GenerativeRemove","GenerativeReplace","GenerativeRecolor","GenerativeBackgroundReplace","Extract","blur","blurLevel","grayscale","sepia","level","shadow","shadowLevel","colorize","colorizeLevel","oilPaint","oilPaintLevel","artisticFilter","artisticFilterType","cartoonify","cartoonifyLevel","outline","styleTransfer","imageSource","boomerang","advancedRedEye","blackwhite","negate","redEye","reverse","accelerate","speedIncreasePercent","fadeIn","fadeLength","fadeOut","loop","additionalLoops","makeTransparent","tolerance","noise","percentage","vignette","strength","dither","ditherType","vectorize","gradientFade","assistColorBlind","simulateColorBlind","deshake","pixels","transition","pixelate","squareSize","removeBackground","backgroundRemoval","dropShadow","generativeRemove","generativeReplace","generativeBackgroundReplace","extract","prompts","generativeRecolor","color","generativeRestore","upscale","theme","enhance","Effect"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/effect.js"],"sourcesContent":["import { BlurAction } from \"./effect/Blur.js\";\nimport { AccelerationEffectAction } from \"./effect/leveled/Accelerate.js\";\nimport { LoopEffectAction } from \"./effect/leveled/Loop.js\";\nimport { CartoonifyEffect } from \"./effect/Cartoonify.js\";\nimport { EffectOutline } from \"./effect/Outline.js\";\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction.js\";\nimport { MakeTransparentEffectAction } from \"./effect/leveled/MakeTransparent.js\";\nimport { VectorizeEffectAction } from \"./effect/Vectorize.js\";\nimport { SimulateColorBlindEffectAction } from \"./effect/SimulateColorBlind.js\";\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel.js\";\nimport { AssistColorBlindEffectAction } from \"./effect/AssistColorBlind.js\";\nimport { GradientFadeEffectAction } from \"./effect/GradientFade.js\";\nimport { FadeOutEffectAction } from \"./effect/leveled/FadeOut.js\";\nimport { ColorizeEffectAction } from \"./effect/Colorize.js\";\nimport { ShadowEffectAction } from \"./effect/Shadow.js\";\nimport { StyleTransfer } from \"./effect/StyleTransfer.js\";\nimport { DitherEffectAction } from \"./effect/Dither.js\";\nimport { DeshakeEffectAction } from \"./effect/leveled/Deshake.js\";\nimport { Pixelate } from \"./effect/pixelate/Pixelate.js\";\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength.js\";\nimport { BlackwhiteEffectAction } from \"./effect/leveled/Blackwhite.js\";\nimport { FadeInEffectAction } from \"./effect/leveled/FadeIn.js\";\nimport { RemoveBackgroundAction } from \"./effect/RemoveBackgroundAction.js\";\nimport { ThemeEffect } from \"./effect/Theme.js\";\nimport { BackgroundRemoval } from \"./effect/BackgroundRemoval.js\";\nimport { DropShadow } from \"./effect/DropShadow.js\";\nimport { GenerativeRemove } from \"./effect/GenerativeRemove.js\";\nimport { GenerativeReplace } from \"./effect/GenerativeReplace.js\";\nimport { GenerativeRecolor } from \"./effect/GenerativeRecolor.js\";\nimport { GenerativeBackgroundReplace } from \"./effect/GenerativeBackgroundReplace.js\";\nimport { Extract } from \"./effect/Extract.js\";\n/**\n * @summary action\n * @description Applies a blurring filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.BlurAction}\n */\nfunction blur(blurLevel) {\n    return new BlurAction(blurLevel);\n}\n/**\n * @summary action\n * @description Converts the image to gray-scale (multiple shades of gray).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction grayscale() {\n    return new SimpleEffectAction(\"grayscale\");\n}\n/**\n * @summary action\n * @description Changes the color scheme of the image to sepia.\n * @memberOf Actions.Effect\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction sepia(level) {\n    return new EffectActionWithLevel(\"sepia\", level);\n}\n/**\n * @summary action\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @param shadowLevel\n * @return {Actions.Effect.ShadowEffectAction}\n */\nfunction shadow(shadowLevel) {\n    return new ShadowEffectAction(\"shadow\", shadowLevel);\n}\n/**\n * @summary action\n * @description Applies a colorizing filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\n * @return {Actions.Effect.ColorizeEffectAction}\n */\nfunction colorize(colorizeLevel) {\n    return new ColorizeEffectAction(\"colorize\", colorizeLevel);\n}\n/**\n * @summary action\n * @description Applies an oilPaint filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction oilPaint(oilPaintLevel) {\n    return new EffectActionWithStrength(\"oil_paint\", oilPaintLevel);\n}\n/**\n * @summary action\n * @description Applies an artistic filter to the asset.\n * @memberOf Actions.Effect\n * @param {ArtisticFilterType | string} artisticFilterType\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction artisticFilter(artisticFilterType) {\n    return new SimpleEffectAction(\"art\", artisticFilterType);\n}\n/**\n * @summary action\n * @description Applies a cartoonify effect to the asset.\n * @memberOf Actions.Effect\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.CartoonifyEffect}\n */\nfunction cartoonify(cartoonifyLevel) {\n    return new CartoonifyEffect(\"cartoonify\", cartoonifyLevel);\n}\n/**\n * @summary action\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.EffectOutline}\n */\nfunction outline() {\n    return new EffectOutline();\n}\n/**\n * @summary action\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon|Neural Artwork Style Transfer}\n * @memberOf Actions.Effect\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/url-gen/qualifiers/sources`\n * @return {Actions.Effect.StyleTransfer}\n */\nfunction styleTransfer(imageSource) {\n    return new StyleTransfer(imageSource);\n}\n/**\n * @summary action\n * @description\n * Causes a video clip to play forwards and then backwards.\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction boomerang() {\n    return new SimpleEffectAction(\"boomerang\");\n}\n/**\n * @summary action\n * @description\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction advancedRedEye() {\n    return new SimpleEffectAction(\"adv_redeye\");\n}\n/**\n * @summary action\n * @description Converts the image to black and white.\n * @memberOf Actions.Effect\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\n * @return {Actions.Effect.BlackwhiteEffectAction}\n */\nfunction blackwhite(level) {\n    return new BlackwhiteEffectAction(\"blackwhite\", level);\n}\n/**\n * @summary action\n * @description Negates the image colors (negative).\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction negate() {\n    return new SimpleEffectAction(\"negate\");\n}\n/**\n * @summary action\n * @description Removes red eyes in the image.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction redEye() {\n    return new SimpleEffectAction(\"redeye\");\n}\n/**\n * @summary action\n * @description Plays the video or audio file in reverse.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction reverse() {\n    return new SimpleEffectAction(\"reverse\");\n}\n/**\n * @summary action\n * @description Changes the speed of the video playback.\n * @memberOf Actions.Effect\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\n * @return {Actions.Effect.AccelerationEffectAction}\n */\nfunction accelerate(speedIncreasePercent) {\n    return new AccelerationEffectAction(speedIncreasePercent);\n}\n/**\n * @summary action\n * @description\n * Fade in at the beginning of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeInEffectAction}\n */\nfunction fadeIn(fadeLength) {\n    return new FadeInEffectAction(fadeLength);\n}\n/**\n * @summary action\n * @description\n * Fade out at the end of the video.\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\n * @memberOf Actions.Effect\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\n * @return {Actions.Effect.FadeoutEffectAction}\n */\nfunction fadeOut(fadeLength) {\n    return new FadeOutEffectAction(fadeLength);\n}\n/**\n * @summary action\n * @description\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\n * The total number of iterations is the number of additional loops plus one. <br/>\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n * @memberOf Actions.Effect\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\n * @return {Actions.Effect.LoopEffectAction}\n */\nfunction loop(additionalLoops) {\n    return new LoopEffectAction(\"loop\", additionalLoops);\n}\n/**\n * @summary action\n * @description\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\n *\n * @memberOf Actions.Effect\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n * @return {Actions.Effect.MakeTransparentEffectAction}\n */\nfunction makeTransparent(tolerance) {\n    return new MakeTransparentEffectAction(\"make_transparent\", tolerance);\n}\n/**\n * @summary action\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\n * @memberOf Actions.Effect\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\n * @return {Actions.Effect.EffectActionWithLevel}\n */\nfunction noise(percentage) {\n    return new EffectActionWithLevel(\"noise\", percentage);\n}\n/**\n * @summary action\n * @description Applies a vignette effect.\n * @memberOf Actions.Effect\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\n * @return {Actions.Effect.EffectActionWithStrength}\n */\nfunction vignette(strength) {\n    return new EffectActionWithStrength(\"vignette\", strength);\n}\n/**\n * @summary action\n * @description\n * Applies an ordered dither filter to the image.\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/url-gen/qualifiers/dither} for ditherType.\n * @memberOf Actions.Effect\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\n * @return {Actions.Effect.DitherEffectAction}\n */\nfunction dither(ditherType) {\n    return new DitherEffectAction(\"ordered_dither\", ditherType);\n}\n/**\n * @summary action\n * @description\n * Vectorizes the image.\n * Notes:\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.VectorizeEffectAction}\n */\nfunction vectorize() {\n    return new VectorizeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies a gradient fade effect from one edge of the image.\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\n * To apply different amounts of fade to multiple edges, use chained fade effects.\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GradientFadeEffectAction}\n */\nfunction gradientFade() {\n    return new GradientFadeEffectAction();\n}\n/**\n * @summary action\n * @description\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.AssistColorBlindEffectAction}\n */\nfunction assistColorBlind() {\n    return new AssistColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\n */\nfunction simulateColorBlind() {\n    return new SimulateColorBlindEffectAction();\n}\n/**\n * @summary action\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DeshakeEffectAction}\n */\nfunction deshake(pixels) {\n    return new DeshakeEffectAction(\"deshake\", pixels);\n}\n/**\n * @summary action\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\n * additional layer and specifying the transition effect\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction transition() {\n    return new SimpleEffectAction(\"transition\");\n}\n/**\n * @summary action\n * @description Applies a pixelatering filter to the asset.\n * @memberOf Actions.Effect\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\n * @return {Actions.Effect.Pixelate}\n */\nfunction pixelate(squareSize) {\n    return new Pixelate(squareSize);\n}\n/**\n * @summary action\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\n *              Use when the background is a uniform color.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval|Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.RemoveBackgroundAction}\n */\nfunction removeBackground() {\n    return new RemoveBackgroundAction();\n}\n/**\n * @summary action\n * @description Uses the Cloudinary AI Background Removal add-on to make the background of an image transparent.</br>\n *              When combined with other transformations, this effect must be specified in the first component.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_background_removal|Background Removal}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.BackgroundRemoval}\n */\nfunction backgroundRemoval() {\n    return new BackgroundRemoval();\n}\n/**\n * @summary action\n * @description Adds a shadow to the object in an image.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_dropshadow|Drop Shadow}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.DropShadow}\n */\nfunction dropShadow() {\n    return new DropShadow();\n}\n/**\n * @summary action\n * @description Remove objects from an asset using Generative AI\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_remove|Generative Remove}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeRemove}\n */\nfunction generativeRemove() {\n    return new GenerativeRemove();\n}\n/**\n * @summary action\n * @description Uses generative AI to replace parts of your image with something else.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_replace|Generative Replace}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeReplace}\n */\nfunction generativeReplace() {\n    return new GenerativeReplace();\n}\n/**\n * @summary action\n * @description Uses generative AI to replace background of your image with something else.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_background_replace|Generative Background Replace}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeBackgroundReplace}\n */\nfunction generativeBackgroundReplace() {\n    return new GenerativeBackgroundReplace();\n}\n/**\n * @summary action\n * @description Extracts an area or multiple areas of an image, described in natural language.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_extract|Extract}\n *\n * @memberOf Actions.Effect\n * @return {Actions.Effect.Extract}\n */\nfunction extract(prompts) {\n    return new Extract(prompts);\n}\n/**\n * @summary action\n * @description Uses generative AI to recolor objects from your image.\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_recolor|Generative Recolor}\n * @param {string | string[]} prompts\n * @param {SystemColors} color\n * @memberOf Actions.Effect\n * @return {Actions.Effect.GenerativeRecolor}\n */\nfunction generativeRecolor(prompts, color) {\n    return new GenerativeRecolor(prompts, color);\n}\n/**\n * @summary action\n * @description\n * Uses generative AI to restore details in poor quality images\n * or images that may have become degraded through repeated processing and compression.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction generativeRestore() {\n    return new SimpleEffectAction(\"gen_restore\");\n}\n/**\n * @summary action\n * @description\n * Uses AI-based prediction to add fine detail while upscaling small images.\n * This 'super-resolution' feature scales each dimension by four, multiplying the total number of pixels by 16.\n * @memberOf Actions.Effect\n * @return {Actions.Effect.SimpleEffectAction}\n */\nfunction upscale() {\n    return new SimpleEffectAction(\"upscale\");\n}\n/**\n *\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @param {SystemColors} color\n * @return {Actions.Effect.ThemeEffect}\n */\nfunction theme(color) {\n    return new ThemeEffect(color);\n}\n/**\n *\n * @description Uses AI to analyze an image and make adjustments to enhance the appeal of the image.\n * @return {Actions.Effect.Enhance}\n */\nfunction enhance() {\n    return new SimpleEffectAction(\"enhance\");\n}\n/**\n * @description Defines effects that you can apply to transform your assets.\n * @memberOf Actions\n * @namespace Effect\n * @example\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * // Import everything, or just the action you need for tree-shaking purposes\n * import {Effect, sepia} from \"@cloudinary/url-gen/actions/effect\";\n * import {ArtisticFilter, alDente} from \"@cloudinary/url-gen/qualifiers/artisticFilter\";\n * import {ShakeStrength, pixels16} from \"@cloudinary/url-gen/qualifiers/shakeStrength\";\n * import {cat, dog} from \"@cloudinary/url-gen/qualifiers/ForegroundObject\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * image.effect(Effect.advancedRedEye())\n * .effect(Effect.accelerate())\n * .effect(Effect.accelerate(100))\n * .effect(Effect.accelerate().rate(5))\n * .effect(Effect.boomerang())\n * .effect(Effect.blackwhite())\n * .effect(Effect.blackwhite(10))\n * .effect(Effect.blackwhite().threshold(20))\n * .effect(Effect.fadeIn(100))\n * .effect(Effect.fadeIn().duration(5))\n * .effect(Effect.fadeOut(100))\n * .effect(Effect.fadeOut().duration(5))\n * .effect(Effect.grayscale())\n * .effect(Effect.loop())\n * .effect(Effect.loop(100))\n * .effect(Effect.loop().additionalIterations(5))\n * .effect(Effect.makeTransparent())\n * .effect(Effect.makeTransparent(100))\n * .effect(Effect.makeTransparent().tolerance(5))\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\n * .effect(Effect.noise())\n * .effect(Effect.noise(100))\n * .effect(Effect.noise().level(5))\n * .effect(Effect.negate())\n * .effect(Effect.reverse())\n * .effect(Effect.redEye())\n * .effect(Effect.sepia())\n * .effect(Effect.sepia(100))\n * .effect(Effect.sepia().level(5))\n * .effect(Effect.vignette())\n * .effect(Effect.vignette(100))\n * .effect(Effect.vignette().strength(5))\n * .effect(Effect.deshake())\n * .effect(Effect.deshake(10))\n * .effect(Effect.artisticFilter(alDente())\n * .effect(Effect.deshake().shakeStrength(pixels16()))\n * .effect(Effect.backgroundRemoval().fineEdges(true).hints(cat(), dog())\n * .effect(Effect.generativeRemove().prompt(\"red car\").detectMultiple())\n * .effect(Effect.generativeRemove().region({x: 20, y: 200, width: 100, height: 100}))\n * .effect(Effect.generativeReplace().from(\"ceiling\").to(\"sunny sky\").preserveGeometry(true))\n */\nconst Effect = {\n    pixelate: pixelate,\n    deshake: deshake,\n    boomerang: boomerang,\n    advancedRedEye: advancedRedEye,\n    blackwhite,\n    negate: negate,\n    redEye: redEye,\n    reverse: reverse,\n    accelerate: accelerate,\n    fadeIn: fadeIn,\n    fadeOut: fadeOut,\n    loop: loop,\n    makeTransparent: makeTransparent,\n    noise: noise,\n    vignette: vignette,\n    blur: blur,\n    grayscale: grayscale,\n    sepia: sepia,\n    shadow: shadow,\n    colorize: colorize,\n    oilPaint: oilPaint,\n    artisticFilter: artisticFilter,\n    cartoonify: cartoonify,\n    outline: outline,\n    styleTransfer: styleTransfer,\n    gradientFade: gradientFade,\n    vectorize: vectorize,\n    assistColorBlind: assistColorBlind,\n    simulateColorBlind: simulateColorBlind,\n    transition: transition,\n    dither: dither,\n    removeBackground,\n    backgroundRemoval,\n    dropShadow,\n    generativeRemove,\n    generativeReplace,\n    generativeBackgroundReplace,\n    generativeRecolor,\n    generativeRestore,\n    upscale,\n    theme,\n    enhance,\n    extract\n};\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, backgroundRemoval, dropShadow, generativeRemove, generativeReplace, generativeBackgroundReplace, generativeRecolor, generativeRestore, upscale, theme, enhance, extract };\n"],"mappings":"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AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;EACxB,OAAO,IAAIhD,wBAAJ,CAA6B,UAA7B,EAAyCgD,QAAzC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,UAAhB,EAA4B;EACxB,OAAO,IAAIrD,kBAAJ,CAAuB,gBAAvB,EAAyCqD,UAAzC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,GAAqB;EACjB,OAAO,IAAI/D,qBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgE,YAAT,GAAwB;EACpB,OAAO,IAAI5D,wBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6D,gBAAT,GAA4B;EACxB,OAAO,IAAI9D,4BAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+D,kBAAT,GAA8B;EAC1B,OAAO,IAAIjE,8BAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkE,OAAT,CAAiBC,MAAjB,EAAyB;EACrB,OAAO,IAAI1D,mBAAJ,CAAwB,SAAxB,EAAmC0D,MAAnC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,GAAsB;EAClB,OAAO,IAAIvE,kBAAJ,CAAuB,YAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwE,QAAT,CAAkBC,UAAlB,EAA8B;EAC1B,OAAO,IAAI5D,QAAJ,CAAa4D,UAAb,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,GAA4B;EACxB,OAAO,IAAIzD,sBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0D,iBAAT,GAA6B;EACzB,OAAO,IAAIxD,iBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyD,UAAT,GAAsB;EAClB,OAAO,IAAIxD,UAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyD,gBAAT,GAA4B;EACxB,OAAO,IAAIxD,gBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyD,iBAAT,GAA6B;EACzB,OAAO,IAAIxD,iBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyD,2BAAT,GAAuC;EACnC,OAAO,IAAIvD,2BAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwD,OAAT,CAAiBC,OAAjB,EAA0B;EACtB,OAAO,IAAIxD,OAAJ,CAAYwD,OAAZ,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BD,OAA3B,EAAoCE,KAApC,EAA2C;EACvC,OAAO,IAAI5D,iBAAJ,CAAsB0D,OAAtB,EAA+BE,KAA/B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,GAA6B;EACzB,OAAO,IAAIpF,kBAAJ,CAAuB,aAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqF,OAAT,GAAmB;EACf,OAAO,IAAIrF,kBAAJ,CAAuB,SAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsF,KAAT,CAAeH,KAAf,EAAsB;EAClB,OAAO,IAAIjE,WAAJ,CAAgBiE,KAAhB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASI,OAAT,GAAmB;EACf,OAAO,IAAIvF,kBAAJ,CAAuB,SAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMwF,MAAM,GAAG;EACXhB,QAAQ,EAAEA,QADC;EAEXH,OAAO,EAAEA,OAFE;EAGXzB,SAAS,EAAEA,SAHA;EAIXC,cAAc,EAAEA,cAJL;EAKXC,UALW;EAMXC,MAAM,EAAEA,MANG;EAOXC,MAAM,EAAEA,MAPG;EAQXC,OAAO,EAAEA,OARE;EASXC,UAAU,EAAEA,UATD;EAUXE,MAAM,EAAEA,MAVG;EAWXE,OAAO,EAAEA,OAXE;EAYXC,IAAI,EAAEA,IAZK;EAaXE,eAAe,EAAEA,eAbN;EAcXE,KAAK,EAAEA,KAdI;EAeXE,QAAQ,EAAEA,QAfC;EAgBXnC,IAAI,EAAEA,IAhBK;EAiBXE,SAAS,EAAEA,SAjBA;EAkBXC,KAAK,EAAEA,KAlBI;EAmBXE,MAAM,EAAEA,MAnBG;EAoBXE,QAAQ,EAAEA,QApBC;EAqBXE,QAAQ,EAAEA,QArBC;EAsBXE,cAAc,EAAEA,cAtBL;EAuBXE,UAAU,EAAEA,UAvBD;EAwBXE,OAAO,EAAEA,OAxBE;EAyBXC,aAAa,EAAEA,aAzBJ;EA0BXwB,YAAY,EAAEA,YA1BH;EA2BXD,SAAS,EAAEA,SA3BA;EA4BXE,gBAAgB,EAAEA,gBA5BP;EA6BXC,kBAAkB,EAAEA,kBA7BT;EA8BXG,UAAU,EAAEA,UA9BD;EA+BXR,MAAM,EAAEA,MA/BG;EAgCXW,gBAhCW;EAiCXC,iBAjCW;EAkCXC,UAlCW;EAmCXC,gBAnCW;EAoCXC,iBApCW;EAqCXC,2BArCW;EAsCXG,iBAtCW;EAuCXE,iBAvCW;EAwCXC,OAxCW;EAyCXC,KAzCW;EA0CXC,OA1CW;EA2CXP;AA3CW,CAAf;AA6CA,SAASQ,MAAT,EAAiBhB,QAAjB,EAA2BH,OAA3B,EAAoCzB,SAApC,EAA+CC,cAA/C,EAA+DC,UAA/D,EAA2EC,MAA3E,EAAmFC,MAAnF,EAA2FC,OAA3F,EAAoGC,UAApG,EAAgHE,MAAhH,EAAwHE,OAAxH,EAAiIC,IAAjI,EAAuIE,eAAvI,EAAwJE,KAAxJ,EAA+JE,QAA/J,EAAyKnC,IAAzK,EAA+KE,SAA/K,EAA0LC,KAA1L,EAAiME,MAAjM,EAAyME,QAAzM,EAAmNE,QAAnN,EAA6NE,cAA7N,EAA6OE,UAA7O,EAAyPE,OAAzP,EAAkQC,aAAlQ,EAAiRwB,YAAjR,EAA+RD,SAA/R,EAA0SE,gBAA1S,EAA4TC,kBAA5T,EAAgVG,UAAhV,EAA4VR,MAA5V,EAAoWW,gBAApW,EAAsXC,iBAAtX,EAAyYC,UAAzY,EAAqZC,gBAArZ,EAAuaC,iBAAva,EAA0bC,2BAA1b,EAAudG,iBAAvd,EAA0eE,iBAA1e,EAA6fC,OAA7f,EAAsgBC,KAAtgB,EAA6gBC,OAA7gB,EAAshBP,OAAthB"},"metadata":{},"sourceType":"module"}