{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport RoundCornersAction from \"./roundCorners/RoundCornersAction.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\n\nclass BorderAction extends Action {\n  /**\n   * @description Adds a border of the specified type around an image or video.\n   * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n   * @param {string} color The color of the border.\n   * @param {number} borderWidth The width in pixels.\n   */\n  constructor(borderType, color, borderWidth) {\n    super();\n    this._actionModel = {};\n    this.borderType = borderType;\n    this.borderColor = prepareColor(color);\n    this.borderWidth = borderWidth;\n    this._actionModel = {\n      color: prepareColor(color),\n      width: borderWidth,\n      actionType: 'border'\n    };\n  }\n  /**\n   * @description Sets the width of the border\n   * @param {number | string} borderWidth The width in pixels.\n   */\n\n\n  width(borderWidth) {\n    this.borderWidth = borderWidth;\n    this._actionModel.width = borderWidth;\n    return this;\n  }\n  /**\n   * @description Sets the color of the border.\n   * @param {string} borderColor The color of the border.\n   */\n\n\n  color(borderColor) {\n    this.borderColor = prepareColor(borderColor);\n    this._actionModel.color = prepareColor(borderColor);\n    return this;\n  }\n  /**\n   * @description Rounds the specified corners of an image.\n   * @param {RoundCornersAction} roundCorners\n   * @return {this}\n   */\n\n\n  roundCorners(roundCorners) {\n    this._roundCorners = roundCorners;\n    this._actionModel.radius = roundCorners.getRadius();\n    return this;\n  }\n  /**\n   * @description Sets the style of the border.\n   * @param {number | string} width The width in pixels.\n   * @param {string} color The color of the border, e.g 'green', 'yellow'.\n   * @return {this}\n   */\n\n\n  solid(width, color) {\n    this.borderType = 'solid';\n    this.borderColor = prepareColor(color);\n    this.borderWidth = width;\n    this._actionModel.color = prepareColor(color);\n    this._actionModel.width = width;\n    return this;\n  }\n\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n    this.addQualifier(new Qualifier('bo', qualifierValue));\n\n    if (this._roundCorners) {\n      this.addQualifier(this._roundCorners.qualifiers.get('r'));\n    }\n  }\n\n  static fromJson(actionModel) {\n    const {\n      width,\n      color,\n      radius\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this('solid', color, width);\n\n    if (radius) {\n      const roundCornersAction = (() => {\n        if (radius === 'max') {\n          return new RoundCornersAction().max();\n        }\n\n        if (Array.isArray(radius)) {\n          return new RoundCornersAction().radius(...radius);\n        }\n\n        return undefined;\n      })();\n\n      if (roundCornersAction) {\n        result.roundCorners(roundCornersAction);\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\n\n\nfunction solid(width, color) {\n  return new BorderAction('solid', color, width);\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the radius of the border.\n * @param {Actions.RoundCorners.RoundCornersAction} roundCorners RoundCorners action.\n * @return {Actions.Border.BorderAction}\n */\n\n\nfunction roundCorners(roundCorners) {\n  const borderActionInstance = new BorderAction('solid', 'transparent', 0);\n  borderActionInstance.roundCorners(roundCorners);\n  return borderActionInstance;\n}\n\nconst Border = {\n  solid,\n  roundCorners\n};\nexport { BorderAction, Border, solid, roundCorners };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","prepareColor","RoundCornersAction","BorderAction","constructor","borderType","color","borderWidth","_actionModel","borderColor","width","actionType","roundCorners","_roundCorners","radius","getRadius","solid","prepareQualifiers","qualifierValue","setDelimiter","addQualifier","qualifiers","get","fromJson","actionModel","result","roundCornersAction","max","Array","isArray","undefined","borderActionInstance","Border"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/border.js"],"sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport RoundCornersAction from \"./roundCorners/RoundCornersAction.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\nclass BorderAction extends Action {\n    /**\n     * @description Adds a border of the specified type around an image or video.\n     * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n     * @param {string} color The color of the border.\n     * @param {number} borderWidth The width in pixels.\n     */\n    constructor(borderType, color, borderWidth) {\n        super();\n        this._actionModel = {};\n        this.borderType = borderType;\n        this.borderColor = prepareColor(color);\n        this.borderWidth = borderWidth;\n        this._actionModel = {\n            color: prepareColor(color),\n            width: borderWidth,\n            actionType: 'border',\n        };\n    }\n    /**\n     * @description Sets the width of the border\n     * @param {number | string} borderWidth The width in pixels.\n     */\n    width(borderWidth) {\n        this.borderWidth = borderWidth;\n        this._actionModel.width = borderWidth;\n        return this;\n    }\n    /**\n     * @description Sets the color of the border.\n     * @param {string} borderColor The color of the border.\n     */\n    color(borderColor) {\n        this.borderColor = prepareColor(borderColor);\n        this._actionModel.color = prepareColor(borderColor);\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param {RoundCornersAction} roundCorners\n     * @return {this}\n     */\n    roundCorners(roundCorners) {\n        this._roundCorners = roundCorners;\n        this._actionModel.radius = roundCorners.getRadius();\n        return this;\n    }\n    /**\n     * @description Sets the style of the border.\n     * @param {number | string} width The width in pixels.\n     * @param {string} color The color of the border, e.g 'green', 'yellow'.\n     * @return {this}\n     */\n    solid(width, color) {\n        this.borderType = 'solid';\n        this.borderColor = prepareColor(color);\n        this.borderWidth = width;\n        this._actionModel.color = prepareColor(color);\n        this._actionModel.width = width;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n        this.addQualifier(new Qualifier('bo', qualifierValue));\n        if (this._roundCorners) {\n            this.addQualifier(this._roundCorners.qualifiers.get('r'));\n        }\n    }\n    static fromJson(actionModel) {\n        const { width, color, radius } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this('solid', color, width);\n        if (radius) {\n            const roundCornersAction = (() => {\n                if (radius === 'max') {\n                    return new RoundCornersAction().max();\n                }\n                if (Array.isArray(radius)) {\n                    return new RoundCornersAction().radius(...radius);\n                }\n                return undefined;\n            })();\n            if (roundCornersAction) {\n                result.roundCorners(roundCornersAction);\n            }\n        }\n        return result;\n    }\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\nfunction solid(width, color) {\n    return new BorderAction('solid', color, width);\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the radius of the border.\n * @param {Actions.RoundCorners.RoundCornersAction} roundCorners RoundCorners action.\n * @return {Actions.Border.BorderAction}\n */\nfunction roundCorners(roundCorners) {\n    const borderActionInstance = new BorderAction('solid', 'transparent', 0);\n    borderActionInstance.roundCorners(roundCorners);\n    return borderActionInstance;\n}\nconst Border = {\n    solid,\n    roundCorners,\n};\nexport { BorderAction, Border, solid, roundCorners };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}