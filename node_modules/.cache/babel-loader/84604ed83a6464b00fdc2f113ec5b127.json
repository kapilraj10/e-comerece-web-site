{"ast":null,"code":"import { AutoGravity } from \"../../qualifiers/gravity/autoGravity/AutoGravity.js\";\nimport { FocusOnGravity } from \"../../qualifiers/gravity/focusOnGravity/FocusOnGravity.js\";\nimport { autoGravity } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue } from \"../../qualifiers/focusOn.js\";\n/**\n * true if gravity starts with 'auto' or 'auto:'\n * @param gravity\n */\n\nfunction isIAutoGravityString(gravity) {\n  return gravity && `${gravity}`.split(':')[0] === 'auto';\n}\n/**\n * Validate that given val is an ICompassGravity\n * @param gravity\n */\n\n\nfunction isCompassGravity(gravity) {\n  //const gravityString = `${(typeof gravity === \"string\" ? gravity : gravity.qualifierValue)}`;\n  const gravityValue = getGravityValue(gravity);\n  return ['north', 'center', 'east', 'west', 'south', 'north_west', 'south_east', 'south_west', 'north_east'].includes(gravityValue);\n}\n/**\n * Get the value of given gravity\n * @param gravity\n */\n\n\nfunction getGravityValue(gravity) {\n  return `${gravity}`.replace('g_', '');\n}\n/**\n * Creates a compassGravity model\n * @param gravity\n */\n\n\nfunction createCompassGravityModel(gravity) {\n  return {\n    compass: getGravityValue(gravity),\n    gravityType: 'direction'\n  };\n}\n/**\n * Validate that given gravity is an instance of ocr gravity\n * @param gravity\n */\n\n\nfunction isOcrGravity(gravity) {\n  return getGravityValue(gravity) === 'ocr_text';\n}\n/**\n * Creates an ocr gravity model\n */\n\n\nfunction createOcrGravityModel() {\n  return {\n    gravityType: 'ocr'\n  };\n}\n/**\n * Validate that given gravity is an instance of AutoGravity\n * @param gravity\n */\n\n\nfunction isAutoGravity(gravity) {\n  return `${gravity.qualifierValue}`.split(':')[0] === 'auto';\n}\n/**\n * Create an instance of IAutoGravityObjectModel\n * @param gravity\n */\n\n\nfunction createIAutoFocusObject(gravity) {\n  const gravityString = gravity.toString();\n  const values = gravityString.split('_');\n  const result = {\n    object: values[0]\n  };\n\n  if (values.length > 1) {\n    if (values[1] === 'avoid') {\n      result.avoid = true;\n    } else {\n      result.weight = +values[1];\n    }\n  }\n\n  return result;\n}\n/**\n * Creates an auto gravity model from given AutoGravity\n * @param gravity\n */\n\n\nfunction createAutoGravityModel(gravity) {\n  let values;\n  const gravityQualifier = gravity === 'auto' ? new AutoGravity() : gravity;\n\n  if (`${gravity}`.startsWith('auto:')) {\n    values = `${gravity}`.split(':').filter(v => v !== 'auto');\n  } else {\n    values = gravityQualifier.qualifierValue.values.filter(v => v !== 'auto');\n  }\n\n  const autoFocus = values.map(createIAutoFocusObject);\n  return {\n    gravityType: 'auto',\n    autoFocus\n  };\n}\n/**\n * Create IFocusOnGravityModel from FocusOnGravity\n * @param gravity\n */\n\n\nfunction createFocusOnGravityModel(gravity) {\n  const hasAutoGravity = `${gravity}`.split(':').includes('auto');\n  const values = gravity.qualifierValue.values;\n  const focusOnValues = hasAutoGravity ? values.slice(0, values.length - 1) : values;\n  const result = {\n    gravityType: 'object',\n    focusOnObjects: focusOnValues.map(v => `${v}`)\n  };\n\n  if (hasAutoGravity) {\n    // Remove the first 'auto' value by slicing it, because it's added by autoGravity()\n    const autoFocusObjects = values[values.length - 1].values.slice(1);\n    const autoGravityInstance = autoGravity().autoFocus(...autoFocusObjects);\n    result.fallbackGravity = createAutoGravityModel(autoGravityInstance);\n  }\n\n  return result;\n}\n/**\n * Creates a FocusOnGravity from given string\n * @param gravity\n */\n\n\nfunction createFocusOnGravity(gravity) {\n  const values = gravity.split(':');\n  const focusOnValues = values.map(g => new FocusOnValue(g));\n  return new FocusOnGravity(focusOnValues);\n}\n/**\n * Create a model of given gravity\n * @param gravity\n */\n\n\nexport function createGravityModel(gravity) {\n  if (isCompassGravity(gravity)) {\n    return createCompassGravityModel(gravity);\n  }\n\n  if (isOcrGravity(gravity)) {\n    return createOcrGravityModel();\n  }\n\n  if (isIAutoGravityString(gravity) || isAutoGravity(gravity)) {\n    return createAutoGravityModel(gravity);\n  }\n\n  return createFocusOnGravityModel(typeof gravity === 'string' ? createFocusOnGravity(gravity) : gravity);\n}","map":{"version":3,"names":["AutoGravity","FocusOnGravity","autoGravity","FocusOnValue","isIAutoGravityString","gravity","split","isCompassGravity","gravityValue","getGravityValue","includes","replace","createCompassGravityModel","compass","gravityType","isOcrGravity","createOcrGravityModel","isAutoGravity","qualifierValue","createIAutoFocusObject","gravityString","toString","values","result","object","length","avoid","weight","createAutoGravityModel","gravityQualifier","startsWith","filter","v","autoFocus","map","createFocusOnGravityModel","hasAutoGravity","focusOnValues","slice","focusOnObjects","autoFocusObjects","autoGravityInstance","fallbackGravity","createFocusOnGravity","g","createGravityModel"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/internal/models/createGravityModel.js"],"sourcesContent":["import { AutoGravity } from \"../../qualifiers/gravity/autoGravity/AutoGravity.js\";\nimport { FocusOnGravity } from \"../../qualifiers/gravity/focusOnGravity/FocusOnGravity.js\";\nimport { autoGravity } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue } from \"../../qualifiers/focusOn.js\";\n/**\n * true if gravity starts with 'auto' or 'auto:'\n * @param gravity\n */\nfunction isIAutoGravityString(gravity) {\n    return gravity && `${gravity}`.split(':')[0] === 'auto';\n}\n/**\n * Validate that given val is an ICompassGravity\n * @param gravity\n */\nfunction isCompassGravity(gravity) {\n    //const gravityString = `${(typeof gravity === \"string\" ? gravity : gravity.qualifierValue)}`;\n    const gravityValue = getGravityValue(gravity);\n    return ['north', 'center', 'east', 'west', 'south', 'north_west', 'south_east', 'south_west', 'north_east'].includes(gravityValue);\n}\n/**\n * Get the value of given gravity\n * @param gravity\n */\nfunction getGravityValue(gravity) {\n    return `${gravity}`.replace('g_', '');\n}\n/**\n * Creates a compassGravity model\n * @param gravity\n */\nfunction createCompassGravityModel(gravity) {\n    return {\n        compass: getGravityValue(gravity),\n        gravityType: 'direction'\n    };\n}\n/**\n * Validate that given gravity is an instance of ocr gravity\n * @param gravity\n */\nfunction isOcrGravity(gravity) {\n    return getGravityValue(gravity) === 'ocr_text';\n}\n/**\n * Creates an ocr gravity model\n */\nfunction createOcrGravityModel() {\n    return {\n        gravityType: 'ocr'\n    };\n}\n/**\n * Validate that given gravity is an instance of AutoGravity\n * @param gravity\n */\nfunction isAutoGravity(gravity) {\n    return `${gravity.qualifierValue}`.split(':')[0] === 'auto';\n}\n/**\n * Create an instance of IAutoGravityObjectModel\n * @param gravity\n */\nfunction createIAutoFocusObject(gravity) {\n    const gravityString = gravity.toString();\n    const values = gravityString.split('_');\n    const result = {\n        object: values[0]\n    };\n    if (values.length > 1) {\n        if (values[1] === 'avoid') {\n            result.avoid = true;\n        }\n        else {\n            result.weight = +values[1];\n        }\n    }\n    return result;\n}\n/**\n * Creates an auto gravity model from given AutoGravity\n * @param gravity\n */\nfunction createAutoGravityModel(gravity) {\n    let values;\n    const gravityQualifier = gravity === 'auto' ? new AutoGravity() : gravity;\n    if (`${gravity}`.startsWith('auto:')) {\n        values = `${gravity}`.split(':').filter((v) => v !== 'auto');\n    }\n    else {\n        values = gravityQualifier.qualifierValue.values.filter((v) => v !== 'auto');\n    }\n    const autoFocus = values.map(createIAutoFocusObject);\n    return {\n        gravityType: 'auto',\n        autoFocus\n    };\n}\n/**\n * Create IFocusOnGravityModel from FocusOnGravity\n * @param gravity\n */\nfunction createFocusOnGravityModel(gravity) {\n    const hasAutoGravity = `${gravity}`.split(':').includes('auto');\n    const values = gravity.qualifierValue.values;\n    const focusOnValues = hasAutoGravity ? values.slice(0, values.length - 1) : values;\n    const result = {\n        gravityType: 'object',\n        focusOnObjects: focusOnValues.map((v) => `${v}`)\n    };\n    if (hasAutoGravity) {\n        // Remove the first 'auto' value by slicing it, because it's added by autoGravity()\n        const autoFocusObjects = values[values.length - 1].values.slice(1);\n        const autoGravityInstance = autoGravity().autoFocus(...autoFocusObjects);\n        result.fallbackGravity = createAutoGravityModel(autoGravityInstance);\n    }\n    return result;\n}\n/**\n * Creates a FocusOnGravity from given string\n * @param gravity\n */\nfunction createFocusOnGravity(gravity) {\n    const values = gravity.split(':');\n    const focusOnValues = values.map((g) => new FocusOnValue(g));\n    return new FocusOnGravity(focusOnValues);\n}\n/**\n * Create a model of given gravity\n * @param gravity\n */\nexport function createGravityModel(gravity) {\n    if (isCompassGravity(gravity)) {\n        return createCompassGravityModel(gravity);\n    }\n    if (isOcrGravity(gravity)) {\n        return createOcrGravityModel();\n    }\n    if (isIAutoGravityString(gravity) || isAutoGravity(gravity)) {\n        return createAutoGravityModel(gravity);\n    }\n    return createFocusOnGravityModel(typeof gravity === 'string' ? createFocusOnGravity(gravity) : gravity);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}