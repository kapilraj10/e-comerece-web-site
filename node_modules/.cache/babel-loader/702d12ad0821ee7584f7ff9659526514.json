{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#e_improve|Image improvement effects}\n * @memberOf Actions.Adjust\n */\n\nclass ImproveAction extends Action {\n  constructor() {\n    super();\n    this._actionModel = {\n      actionType: 'improve'\n    };\n  }\n  /**\n   *\n   * @description The improve mode.\n   * @param {Qualifiers.ImproveMode | string} value\n   */\n\n\n  mode(value) {\n    this.modeValue = value;\n    this._actionModel.mode = value;\n    return this;\n  }\n  /**\n   * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n   * @param {number} value\n   */\n\n\n  blend(value) {\n    this.blendValue = value;\n    this._actionModel.blend = value;\n    return this;\n  }\n\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n\n  static fromJson(actionModel) {\n    const {\n      mode,\n      blend\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this();\n    mode && result.mode(mode);\n    blend && result.blend(blend);\n    return result;\n  }\n\n}\n\nexport { ImproveAction };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","ImproveAction","constructor","_actionModel","actionType","mode","value","modeValue","blend","blendValue","prepareQualifiers","qualifierValue","setDelimiter","addQualifier","fromJson","actionModel","result"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/adjust/ImproveAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#e_improve|Image improvement effects}\n * @memberOf Actions.Adjust\n */\nclass ImproveAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = { actionType: 'improve' };\n    }\n    /**\n     *\n     * @description The improve mode.\n     * @param {Qualifiers.ImproveMode | string} value\n     */\n    mode(value) {\n        this.modeValue = value;\n        this._actionModel.mode = value;\n        return this;\n    }\n    /**\n     * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n     * @param {number} value\n     */\n    blend(value) {\n        this.blendValue = value;\n        this._actionModel.blend = value;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { mode, blend } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        mode && result.mode(mode);\n        blend && result.blend(blend);\n        return result;\n    }\n}\nexport { ImproveAction };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BH,MAA5B,CAAmC;EAC/BI,WAAW,GAAG;IACV;IACA,KAAKC,YAAL,GAAoB;MAAEC,UAAU,EAAE;IAAd,CAApB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,IAAI,CAACC,KAAD,EAAQ;IACR,KAAKC,SAAL,GAAiBD,KAAjB;IACA,KAAKH,YAAL,CAAkBE,IAAlB,GAAyBC,KAAzB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIE,KAAK,CAACF,KAAD,EAAQ;IACT,KAAKG,UAAL,GAAkBH,KAAlB;IACA,KAAKH,YAAL,CAAkBK,KAAlB,GAA0BF,KAA1B;IACA,OAAO,IAAP;EACH;;EACDI,iBAAiB,GAAG;IAChB,MAAMC,cAAc,GAAG,IAAIZ,cAAJ,CAAmB,CAAC,SAAD,EAAY,KAAKQ,SAAjB,EAA4B,KAAKE,UAAjC,CAAnB,EAAiEG,YAAjE,CAA8E,GAA9E,CAAvB;IACA,KAAKC,YAAL,CAAkB,IAAIb,SAAJ,CAAc,GAAd,EAAmBW,cAAnB,CAAlB;IACA,OAAO,IAAP;EACH;;EACc,OAARG,QAAQ,CAACC,WAAD,EAAc;IACzB,MAAM;MAAEV,IAAF;MAAQG;IAAR,IAAkBO,WAAxB,CADyB,CAEzB;IACA;;IACA,MAAMC,MAAM,GAAG,IAAI,IAAJ,EAAf;IACAX,IAAI,IAAIW,MAAM,CAACX,IAAP,CAAYA,IAAZ,CAAR;IACAG,KAAK,IAAIQ,MAAM,CAACR,KAAP,CAAaA,KAAb,CAAT;IACA,OAAOQ,MAAP;EACH;;AArC8B;;AAuCnC,SAASf,aAAT"},"metadata":{},"sourceType":"module"}