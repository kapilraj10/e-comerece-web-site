{"ast":null,"code":"/**\n * @description\n * Returns a string representing the float value of the input, if the input was a number-like.\n * Examples:\n * - '1.0' -> '1.0'\n * - 1 -> '1.0'\n * - '5' -> '5.0'\n * - 'auto' -> 'auto'\n * @private\n * @param {string|number} value\n * @return {string}\n */\nexport function toFloatAsString(value) {\n  // Turn the input to string\n  // The Function will return `returnValue` value if the input is not a number-like expression\n  const returnValue = value.toString(); // if the string contains letters, return the input\n\n  if (returnValue.match(/[A-Z]/gi)) {\n    return returnValue;\n  } // If the leading digit is 0, and we have more than 1 digit, it's not a number.\n  // 00, 00000, 0x15 etc.\n\n\n  if (returnValue.length > 1 && returnValue[0] === '0') {\n    return returnValue;\n  } // Final sanity check, parse the number as a float and check if its NaN\n\n\n  const isNumberLike = !isNaN(parseFloat(returnValue)) && returnValue.indexOf(':') === -1; // If it's a number-like, but the input does not contain a decimal - add it.\n\n  if (isNumberLike && returnValue.indexOf('.') === -1) {\n    return `${returnValue}.0`;\n  } else {\n    // If the input already contains a decimal, just return the value\n    return returnValue;\n  }\n}","map":{"version":3,"names":["toFloatAsString","value","returnValue","toString","match","length","isNumberLike","isNaN","parseFloat","indexOf"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/internal/utils/toFloatAsString.js"],"sourcesContent":["/**\n * @description\n * Returns a string representing the float value of the input, if the input was a number-like.\n * Examples:\n * - '1.0' -> '1.0'\n * - 1 -> '1.0'\n * - '5' -> '5.0'\n * - 'auto' -> 'auto'\n * @private\n * @param {string|number} value\n * @return {string}\n */\nexport function toFloatAsString(value) {\n    // Turn the input to string\n    // The Function will return `returnValue` value if the input is not a number-like expression\n    const returnValue = value.toString();\n    // if the string contains letters, return the input\n    if (returnValue.match(/[A-Z]/gi)) {\n        return returnValue;\n    }\n    // If the leading digit is 0, and we have more than 1 digit, it's not a number.\n    // 00, 00000, 0x15 etc.\n    if (returnValue.length > 1 && returnValue[0] === '0') {\n        return returnValue;\n    }\n    // Final sanity check, parse the number as a float and check if its NaN\n    const isNumberLike = !isNaN(parseFloat(returnValue)) && returnValue.indexOf(':') === -1;\n    // If it's a number-like, but the input does not contain a decimal - add it.\n    if (isNumberLike && returnValue.indexOf('.') === -1) {\n        return `${returnValue}.0`;\n    }\n    else {\n        // If the input already contains a decimal, just return the value\n        return returnValue;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;EACnC;EACA;EACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,QAAN,EAApB,CAHmC,CAInC;;EACA,IAAID,WAAW,CAACE,KAAZ,CAAkB,SAAlB,CAAJ,EAAkC;IAC9B,OAAOF,WAAP;EACH,CAPkC,CAQnC;EACA;;;EACA,IAAIA,WAAW,CAACG,MAAZ,GAAqB,CAArB,IAA0BH,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAjD,EAAsD;IAClD,OAAOA,WAAP;EACH,CAZkC,CAanC;;;EACA,MAAMI,YAAY,GAAG,CAACC,KAAK,CAACC,UAAU,CAACN,WAAD,CAAX,CAAN,IAAmCA,WAAW,CAACO,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAAtF,CAdmC,CAenC;;EACA,IAAIH,YAAY,IAAIJ,WAAW,CAACO,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAAlD,EAAqD;IACjD,OAAQ,GAAEP,WAAY,IAAtB;EACH,CAFD,MAGK;IACD;IACA,OAAOA,WAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}