{"ast":null,"code":"import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\n * @summary qualifier\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n * @memberOf Qualifiers\n */\n\nclass TextStyle extends QualifierModel {\n  /**\n   * @param {string} fontFamily The font family\n   * @param {number | string} fontSize The font size\n   */\n  constructor(fontFamily, fontSize) {\n    super();\n\n    if (!fontFamily || !fontSize) {\n      throw `You must provide a fontFamily and fontSize to a TextStyle`;\n    }\n\n    this._qualifierModel.fontFamily = fontFamily;\n    this._qualifierModel.fontSize = fontSize;\n  }\n  /**\n   * @param {number} spacing The spacing between multiple lines in pixels.\n   */\n\n\n  lineSpacing(spacing) {\n    this._qualifierModel.lineSpacing = spacing;\n    return this;\n  }\n  /**\n   * @param spacing The spacing between the letters, in pixels.\n   */\n\n\n  letterSpacing(spacing) {\n    this._qualifierModel.letterSpacing = spacing;\n    return this;\n  }\n  /**\n   * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\n   * @param {FontAntialiasType|string} antiAlias\n   */\n\n\n  fontAntialias(antiAlias) {\n    this._qualifierModel.fontAntialias = antiAlias;\n    return this;\n  }\n  /**\n   * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\n   * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\n   * @param {string} fontFamilyName\n   */\n\n\n  fontFamily(fontFamilyName) {\n    this._qualifierModel.fontFamily = fontFamilyName;\n    return this;\n  }\n  /**\n   * @param {number} fontSize The font size\n   */\n\n\n  fontSize(fontSize) {\n    this._qualifierModel.fontSize = fontSize;\n    return this;\n  }\n  /**\n   * @param {FontWeightType|string} fontWeight The font weight\n   */\n\n\n  fontWeight(fontWeight) {\n    this._qualifierModel.fontWeight = fontWeight;\n    return this;\n  }\n  /**\n   *\n   * @param {string} fontStyle The font style.\n   */\n\n\n  fontStyle(fontStyle) {\n    this._qualifierModel.fontStyle = fontStyle;\n    return this;\n  }\n  /**\n   * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\n   */\n\n\n  fontHinting(fontHinting) {\n    this._qualifierModel.fontHinting = fontHinting;\n    return this;\n  }\n  /**\n   *\n   * @param {TextDecorationType|string} textDecoration The font decoration type.\n   */\n\n\n  textDecoration(textDecoration) {\n    this._qualifierModel.textDecoration = textDecoration;\n    return this;\n  }\n  /**\n   * @param {TextAlignmentType|string} textAlignment The text alignment\n   */\n\n\n  textAlignment(textAlignment) {\n    this._qualifierModel.textAlignment = textAlignment;\n    return this;\n  }\n  /**\n   * @description Whether to include an outline stroke. Set the color and weight of the stroke\n   */\n\n\n  stroke(textStroke) {\n    if (textStroke) {\n      const strokeStyle = textStroke.split('_');\n      this._qualifierModel.stroke = {\n        width: +strokeStyle[1].replace('px', ''),\n        color: strokeStyle[strokeStyle.length - 1]\n      };\n    } else {\n      this._qualifierModel.stroke = true;\n    }\n\n    return this;\n  }\n\n  toString() {\n    const {\n      stroke\n    } = this._qualifierModel;\n    let strokeStr = '';\n\n    if (stroke) {\n      strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n    }\n\n    return [`${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`, this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight, this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle, this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration, this._qualifierModel.textAlignment, strokeStr, this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`, this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`, this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`, this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`].filter(a => a).join('_');\n  }\n\n}\n\nexport { TextStyle };","map":{"version":3,"names":["normal","normalFontWeight","normalFontStyle","normalTextDecoration","serializeCloudinaryCharacters","QualifierModel","solid","isISolidStrokeModel","TextStyle","constructor","fontFamily","fontSize","_qualifierModel","lineSpacing","spacing","letterSpacing","fontAntialias","antiAlias","fontFamilyName","fontWeight","fontStyle","fontHinting","textDecoration","textAlignment","stroke","textStroke","strokeStyle","split","width","replace","color","length","toString","strokeStr","filter","a","join"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/textStyle.js"],"sourcesContent":["import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\n * @summary qualifier\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n * @memberOf Qualifiers\n */\nclass TextStyle extends QualifierModel {\n    /**\n     * @param {string} fontFamily The font family\n     * @param {number | string} fontSize The font size\n     */\n    constructor(fontFamily, fontSize) {\n        super();\n        if (!fontFamily || !fontSize) {\n            throw `You must provide a fontFamily and fontSize to a TextStyle`;\n        }\n        this._qualifierModel.fontFamily = fontFamily;\n        this._qualifierModel.fontSize = fontSize;\n    }\n    /**\n     * @param {number} spacing The spacing between multiple lines in pixels.\n     */\n    lineSpacing(spacing) {\n        this._qualifierModel.lineSpacing = spacing;\n        return this;\n    }\n    /**\n     * @param spacing The spacing between the letters, in pixels.\n     */\n    letterSpacing(spacing) {\n        this._qualifierModel.letterSpacing = spacing;\n        return this;\n    }\n    /**\n     * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\n     * @param {FontAntialiasType|string} antiAlias\n     */\n    fontAntialias(antiAlias) {\n        this._qualifierModel.fontAntialias = antiAlias;\n        return this;\n    }\n    /**\n     * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\n     * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\n     * @param {string} fontFamilyName\n     */\n    fontFamily(fontFamilyName) {\n        this._qualifierModel.fontFamily = fontFamilyName;\n        return this;\n    }\n    /**\n     * @param {number} fontSize The font size\n     */\n    fontSize(fontSize) {\n        this._qualifierModel.fontSize = fontSize;\n        return this;\n    }\n    /**\n     * @param {FontWeightType|string} fontWeight The font weight\n     */\n    fontWeight(fontWeight) {\n        this._qualifierModel.fontWeight = fontWeight;\n        return this;\n    }\n    /**\n     *\n     * @param {string} fontStyle The font style.\n     */\n    fontStyle(fontStyle) {\n        this._qualifierModel.fontStyle = fontStyle;\n        return this;\n    }\n    /**\n     * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\n     */\n    fontHinting(fontHinting) {\n        this._qualifierModel.fontHinting = fontHinting;\n        return this;\n    }\n    /**\n     *\n     * @param {TextDecorationType|string} textDecoration The font decoration type.\n     */\n    textDecoration(textDecoration) {\n        this._qualifierModel.textDecoration = textDecoration;\n        return this;\n    }\n    /**\n     * @param {TextAlignmentType|string} textAlignment The text alignment\n     */\n    textAlignment(textAlignment) {\n        this._qualifierModel.textAlignment = textAlignment;\n        return this;\n    }\n    /**\n     * @description Whether to include an outline stroke. Set the color and weight of the stroke\n     */\n    stroke(textStroke) {\n        if (textStroke) {\n            const strokeStyle = textStroke.split('_');\n            this._qualifierModel.stroke = {\n                width: +(strokeStyle[1].replace('px', '')),\n                color: strokeStyle[strokeStyle.length - 1]\n            };\n        }\n        else {\n            this._qualifierModel.stroke = true;\n        }\n        return this;\n    }\n    toString() {\n        const { stroke } = this._qualifierModel;\n        let strokeStr = '';\n        if (stroke) {\n            strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n        }\n        return [\n            `${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`,\n            this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight,\n            this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle,\n            this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration,\n            this._qualifierModel.textAlignment,\n            strokeStr,\n            this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`,\n            this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`,\n            this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`,\n            this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`\n        ].filter((a) => a).join('_');\n    }\n}\nexport { TextStyle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}