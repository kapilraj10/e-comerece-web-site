{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\n *                The class implements the Builder pattern, where strength() and preserveColor()\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass StyleTransfer extends Action {\n  /**\n   * The Image Source used to create the style transfer,\n   * Use the Image Source builder to quickly create a source:\n   * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/url-gen/qualifiers/sources';}\n   * </br>Create: `Source.image('dog')`\n   * @param {ImageSource} imageSource\n   */\n  constructor(imageSource) {\n    super();\n    this.imageSource = imageSource;\n  }\n  /**\n   * Determines the strength in which the styleTransfer is applied.\n   * @param {number} [effectStrength] - The strength level, 1-100, default: 100\n   * @return {this}\n   */\n\n\n  strength() {\n    let effectStrength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.effectStrength = effectStrength;\n    return this;\n  }\n  /**\n   * More aggressively preserves the colors of the the target photo,\n   * Can be used with `strength()` to enhance this behaviour\n   * @param {boolean} bool\n   * @return {this}\n   */\n\n\n  preserveColor() {\n    let bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.preserve = bool;\n    return this;\n  }\n  /**\n   * The `build` phase of the Action, used internally to concat all the options received into a single string.\n   * The result of this method is the toString() of the imageLayer provided in the constructor.\n   * @return {string}\n   */\n\n\n  toString() {\n    const NAME = 'style_transfer';\n    const PRES = this.preserve ? 'preserve_color' : null;\n    const STRENGTH = this.effectStrength; // Create the style effect\n\n    const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH])); // Handle the source for publicID,\n\n    const sourceOpenString = this.imageSource.getOpenSourceString('l'); // Handle source transformation\n\n    const imgTx = this.imageSource.getTransformation();\n    const sourceTransformation = imgTx ? imgTx.toString() : '';\n    return [sourceOpenString, sourceTransformation, `${styleEffect},fl_layer_apply`].filter(a => a).join('/');\n  }\n\n}\n\nexport { StyleTransfer };","map":{"version":3,"names":["QualifierValue","Action","Qualifier","StyleTransfer","constructor","imageSource","strength","effectStrength","preserveColor","bool","preserve","toString","NAME","PRES","STRENGTH","styleEffect","sourceOpenString","getOpenSourceString","imgTx","getTransformation","sourceTransformation","filter","a","join"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/StyleTransfer.js"],"sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\n *                The class implements the Builder pattern, where strength() and preserveColor()\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass StyleTransfer extends Action {\n    /**\n     * The Image Source used to create the style transfer,\n     * Use the Image Source builder to quickly create a source:\n     * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/url-gen/qualifiers/sources';}\n     * </br>Create: `Source.image('dog')`\n     * @param {ImageSource} imageSource\n     */\n    constructor(imageSource) {\n        super();\n        this.imageSource = imageSource;\n    }\n    /**\n     * Determines the strength in which the styleTransfer is applied.\n     * @param {number} [effectStrength] - The strength level, 1-100, default: 100\n     * @return {this}\n     */\n    strength(effectStrength = null) {\n        this.effectStrength = effectStrength;\n        return this;\n    }\n    /**\n     * More aggressively preserves the colors of the the target photo,\n     * Can be used with `strength()` to enhance this behaviour\n     * @param {boolean} bool\n     * @return {this}\n     */\n    preserveColor(bool = true) {\n        this.preserve = bool;\n        return this;\n    }\n    /**\n     * The `build` phase of the Action, used internally to concat all the options received into a single string.\n     * The result of this method is the toString() of the imageLayer provided in the constructor.\n     * @return {string}\n     */\n    toString() {\n        const NAME = 'style_transfer';\n        const PRES = this.preserve ? 'preserve_color' : null;\n        const STRENGTH = this.effectStrength;\n        // Create the style effect\n        const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH]));\n        // Handle the source for publicID,\n        const sourceOpenString = this.imageSource.getOpenSourceString('l');\n        // Handle source transformation\n        const imgTx = this.imageSource.getTransformation();\n        const sourceTransformation = imgTx ? imgTx.toString() : '';\n        return [\n            sourceOpenString,\n            sourceTransformation,\n            `${styleEffect},fl_layer_apply`\n        ].filter((a) => a).join('/');\n    }\n}\nexport { StyleTransfer };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4CAA/B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BF,MAA5B,CAAmC;EAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,WAAW,CAACC,WAAD,EAAc;IACrB;IACA,KAAKA,WAAL,GAAmBA,WAAnB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,QAAQ,GAAwB;IAAA,IAAvBC,cAAuB,uEAAN,IAAM;IAC5B,KAAKA,cAAL,GAAsBA,cAAtB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIC,aAAa,GAAc;IAAA,IAAbC,IAAa,uEAAN,IAAM;IACvB,KAAKC,QAAL,GAAgBD,IAAhB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIE,QAAQ,GAAG;IACP,MAAMC,IAAI,GAAG,gBAAb;IACA,MAAMC,IAAI,GAAG,KAAKH,QAAL,GAAgB,gBAAhB,GAAmC,IAAhD;IACA,MAAMI,QAAQ,GAAG,KAAKP,cAAtB,CAHO,CAIP;;IACA,MAAMQ,WAAW,GAAG,IAAIb,SAAJ,CAAc,GAAd,EAAmB,IAAIF,cAAJ,CAAmB,CAACY,IAAD,EAAOC,IAAP,EAAaC,QAAb,CAAnB,CAAnB,CAApB,CALO,CAMP;;IACA,MAAME,gBAAgB,GAAG,KAAKX,WAAL,CAAiBY,mBAAjB,CAAqC,GAArC,CAAzB,CAPO,CAQP;;IACA,MAAMC,KAAK,GAAG,KAAKb,WAAL,CAAiBc,iBAAjB,EAAd;IACA,MAAMC,oBAAoB,GAAGF,KAAK,GAAGA,KAAK,CAACP,QAAN,EAAH,GAAsB,EAAxD;IACA,OAAO,CACHK,gBADG,EAEHI,oBAFG,EAGF,GAAEL,WAAY,iBAHZ,EAILM,MAJK,CAIGC,CAAD,IAAOA,CAJT,EAIYC,IAJZ,CAIiB,GAJjB,CAAP;EAKH;;AApD8B;;AAsDnC,SAASpB,aAAT"},"metadata":{},"sourceType":"module"}