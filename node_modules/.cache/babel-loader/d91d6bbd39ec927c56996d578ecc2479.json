{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Represents a layer in a Photoshop document.\n * </br><b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#deliver_selected_layers_of_a_psd_image|Deliver selected layers of a PSD image}\n * @extends SDK.Action\n * @memberOf Actions.PSDTools\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\n */\n\nclass GetLayerAction extends Action {\n  constructor() {\n    super();\n    this.qualifierValue = new QualifierValue();\n    this.qualifierValue.delimiter = ';';\n  }\n  /**\n   * @description deliver an image containing only specified layer of a Photoshop image from The layer index\n   * @param {string|number} from the index of the layer\n   */\n\n\n  byIndex(from) {\n    this.qualifierValue.addValue(from);\n    return this;\n  }\n  /**\n   * @description deliver an image containing only specified range of layers of a Photoshop image\n   * @param {string|number} from The layer number\n   * @param {string|number} to The layer number\n   */\n\n\n  byRange(from, to) {\n    const range = new QualifierValue(from);\n    range.addValue(to);\n    range.delimiter = '-';\n    this.qualifierValue.addValue(range);\n    return this;\n  }\n  /**\n   * @description deliver an image containing only specified layer by name of a Photoshop image\n   * @param {string|number} name The layer by name\n   */\n\n\n  byName(name) {\n    this.name = name;\n    this.qualifierValue.addValue(name);\n    return this;\n  }\n\n  prepareQualifiers() {\n    let qualifierValue = this.qualifierValue;\n\n    if (this.name) {\n      qualifierValue = new QualifierValue(['name', this.qualifierValue]).setDelimiter(':');\n    }\n\n    this.addQualifier(new Qualifier('pg', qualifierValue));\n    return this;\n  }\n\n}\n\nexport { GetLayerAction };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","GetLayerAction","constructor","qualifierValue","delimiter","byIndex","from","addValue","byRange","to","range","byName","name","prepareQualifiers","setDelimiter","addQualifier"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/psdTools/GetLayerAction.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Represents a layer in a Photoshop document.\n * </br><b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#deliver_selected_layers_of_a_psd_image|Deliver selected layers of a PSD image}\n * @extends SDK.Action\n * @memberOf Actions.PSDTools\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\n */\nclass GetLayerAction extends Action {\n    constructor() {\n        super();\n        this.qualifierValue = new QualifierValue();\n        this.qualifierValue.delimiter = ';';\n    }\n    /**\n     * @description deliver an image containing only specified layer of a Photoshop image from The layer index\n     * @param {string|number} from the index of the layer\n     */\n    byIndex(from) {\n        this.qualifierValue.addValue(from);\n        return this;\n    }\n    /**\n     * @description deliver an image containing only specified range of layers of a Photoshop image\n     * @param {string|number} from The layer number\n     * @param {string|number} to The layer number\n     */\n    byRange(from, to) {\n        const range = new QualifierValue(from);\n        range.addValue(to);\n        range.delimiter = '-';\n        this.qualifierValue.addValue(range);\n        return this;\n    }\n    /**\n     * @description deliver an image containing only specified layer by name of a Photoshop image\n     * @param {string|number} name The layer by name\n     */\n    byName(name) {\n        this.name = name;\n        this.qualifierValue.addValue(name);\n        return this;\n    }\n    prepareQualifiers() {\n        let qualifierValue = this.qualifierValue;\n        if (this.name) {\n            qualifierValue = new QualifierValue(['name', this.qualifierValue]).setDelimiter(':');\n        }\n        this.addQualifier(new Qualifier('pg', qualifierValue));\n        return this;\n    }\n}\nexport { GetLayerAction };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAN,SAA6BH,MAA7B,CAAoC;EAChCI,WAAW,GAAG;IACV;IACA,KAAKC,cAAL,GAAsB,IAAIH,cAAJ,EAAtB;IACA,KAAKG,cAAL,CAAoBC,SAApB,GAAgC,GAAhC;EACH;EACD;AACJ;AACA;AACA;;;EACIC,OAAO,CAACC,IAAD,EAAO;IACV,KAAKH,cAAL,CAAoBI,QAApB,CAA6BD,IAA7B;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIE,OAAO,CAACF,IAAD,EAAOG,EAAP,EAAW;IACd,MAAMC,KAAK,GAAG,IAAIV,cAAJ,CAAmBM,IAAnB,CAAd;IACAI,KAAK,CAACH,QAAN,CAAeE,EAAf;IACAC,KAAK,CAACN,SAAN,GAAkB,GAAlB;IACA,KAAKD,cAAL,CAAoBI,QAApB,CAA6BG,KAA7B;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIC,MAAM,CAACC,IAAD,EAAO;IACT,KAAKA,IAAL,GAAYA,IAAZ;IACA,KAAKT,cAAL,CAAoBI,QAApB,CAA6BK,IAA7B;IACA,OAAO,IAAP;EACH;;EACDC,iBAAiB,GAAG;IAChB,IAAIV,cAAc,GAAG,KAAKA,cAA1B;;IACA,IAAI,KAAKS,IAAT,EAAe;MACXT,cAAc,GAAG,IAAIH,cAAJ,CAAmB,CAAC,MAAD,EAAS,KAAKG,cAAd,CAAnB,EAAkDW,YAAlD,CAA+D,GAA/D,CAAjB;IACH;;IACD,KAAKC,YAAL,CAAkB,IAAIhB,SAAJ,CAAc,IAAd,EAAoBI,cAApB,CAAlB;IACA,OAAO,IAAP;EACH;;AA1C+B;;AA4CpC,SAASF,cAAT"},"metadata":{},"sourceType":"module"}