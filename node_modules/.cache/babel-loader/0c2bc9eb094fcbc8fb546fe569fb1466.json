{"ast":null,"code":"/**\n * Create a copy of the source object with all keys in camelCase\n * @function Util.withCamelCaseKeys\n * @return {Object} a new object\n * @param source\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n  return convertKeys(source, camelCase);\n};\n/**\n * Convert string to camelCase\n * @function Util.camelCase\n * @param {string} source - the string to convert\n * @return {string} in camelCase format\n */\n\nexport const camelCase = function (source) {\n  var words = source.match(reWords);\n  words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n  words[0] = words[0].toLocaleLowerCase();\n  return words.join('');\n};\n/**\n * Creates a new object from source, with the keys transformed using the converter.\n * @param {object} source\n * @param {function|null} converter\n * @returns {object}\n */\n\nexport var convertKeys = function (source, converter) {\n  var result, value;\n  result = {};\n\n  for (let key in source) {\n    value = source[key];\n\n    if (converter) {\n      key = converter(key);\n    }\n\n    if (!isEmpty(key)) {\n      // @ts-ignore\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\nexport var reWords = function () {\n  var lower, upper;\n  upper = '[A-Z]';\n  lower = '[a-z]+';\n  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}();\nexport function identity(x) {\n  return x;\n}\nexport function contains(a, obj) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function difference(arr1, arr2) {\n  return arr1.filter(x => !arr2.includes(x));\n}","map":{"version":3,"names":["isEmpty","withCamelCaseKeys","source","convertKeys","camelCase","words","match","reWords","map","word","charAt","toLocaleUpperCase","slice","toLocaleLowerCase","join","converter","result","value","key","lower","upper","RegExp","identity","x","contains","a","obj","i","length","difference","arr1","arr2","filter","includes"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/backwards/utils/legacyBaseUtil.js"],"sourcesContent":["/**\n * Create a copy of the source object with all keys in camelCase\n * @function Util.withCamelCaseKeys\n * @return {Object} a new object\n * @param source\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n    return convertKeys(source, camelCase);\n};\n/**\n * Convert string to camelCase\n * @function Util.camelCase\n * @param {string} source - the string to convert\n * @return {string} in camelCase format\n */\nexport const camelCase = function (source) {\n    var words = source.match(reWords);\n    words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n    words[0] = words[0].toLocaleLowerCase();\n    return words.join('');\n};\n/**\n * Creates a new object from source, with the keys transformed using the converter.\n * @param {object} source\n * @param {function|null} converter\n * @returns {object}\n */\nexport var convertKeys = function (source, converter) {\n    var result, value;\n    result = {};\n    for (let key in source) {\n        value = source[key];\n        if (converter) {\n            key = converter(key);\n        }\n        if (!isEmpty(key)) {\n            // @ts-ignore\n            result[key] = value;\n        }\n    }\n    return result;\n};\nexport var reWords = (function () {\n    var lower, upper;\n    upper = '[A-Z]';\n    lower = '[a-z]+';\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n})();\nexport function identity(x) {\n    return x;\n}\nexport function contains(a, obj) {\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function difference(arr1, arr2) {\n    return arr1.filter(x => !arr2.includes(x));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,cAAxB;AACA,OAAO,MAAMC,iBAAiB,GAAG,UAAUC,MAAV,EAAkB;EAC/C,OAAOC,WAAW,CAACD,MAAD,EAASE,SAAT,CAAlB;AACH,CAFM;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMA,SAAS,GAAG,UAAUF,MAAV,EAAkB;EACvC,IAAIG,KAAK,GAAGH,MAAM,CAACI,KAAP,CAAaC,OAAb,CAAZ;EACAF,KAAK,GAAGA,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,iBAAf,KAAqCF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcC,iBAAd,EAAvD,CAAR;EACAR,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASQ,iBAAT,EAAX;EACA,OAAOR,KAAK,CAACS,IAAN,CAAW,EAAX,CAAP;AACH,CALM;AAMP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIX,WAAW,GAAG,UAAUD,MAAV,EAAkBa,SAAlB,EAA6B;EAClD,IAAIC,MAAJ,EAAYC,KAAZ;EACAD,MAAM,GAAG,EAAT;;EACA,KAAK,IAAIE,GAAT,IAAgBhB,MAAhB,EAAwB;IACpBe,KAAK,GAAGf,MAAM,CAACgB,GAAD,CAAd;;IACA,IAAIH,SAAJ,EAAe;MACXG,GAAG,GAAGH,SAAS,CAACG,GAAD,CAAf;IACH;;IACD,IAAI,CAAClB,OAAO,CAACkB,GAAD,CAAZ,EAAmB;MACf;MACAF,MAAM,CAACE,GAAD,CAAN,GAAcD,KAAd;IACH;EACJ;;EACD,OAAOD,MAAP;AACH,CAdM;AAeP,OAAO,IAAIT,OAAO,GAAI,YAAY;EAC9B,IAAIY,KAAJ,EAAWC,KAAX;EACAA,KAAK,GAAG,OAAR;EACAD,KAAK,GAAG,QAAR;EACA,OAAOE,MAAM,CAACD,KAAK,GAAG,MAAR,GAAiBA,KAAjB,GAAyBD,KAAzB,GAAiC,IAAjC,GAAwCC,KAAxC,GAAgD,GAAhD,GAAsDD,KAAtD,GAA8D,GAA9D,GAAoEC,KAApE,GAA4E,UAA7E,EAAyF,GAAzF,CAAb;AACH,CALoB,EAAd;AAMP,OAAO,SAASE,QAAT,CAAkBC,CAAlB,EAAqB;EACxB,OAAOA,CAAP;AACH;AACD,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,GAArB,EAA0B;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;IAC/B,IAAIF,CAAC,CAACE,CAAD,CAAD,KAASD,GAAb,EAAkB;MACd,OAAO,IAAP;IACH;EACJ;;EACD,OAAO,KAAP;AACH;AACD,OAAO,SAASG,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;EACnC,OAAOD,IAAI,CAACE,MAAL,CAAYT,CAAC,IAAI,CAACQ,IAAI,CAACE,QAAL,CAAcV,CAAd,CAAlB,CAAP;AACH"},"metadata":{},"sourceType":"module"}