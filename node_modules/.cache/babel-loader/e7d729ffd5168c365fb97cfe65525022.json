{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { RawAction } from \"../internal/RawAction.js\";\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\nimport { DeliveryFormatAction } from \"../actions/delivery/DeliveryFormatAction.js\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\n\nclass Transformation {\n  constructor() {\n    this.actions = [];\n  }\n  /**\n   * @param {SDK.Action | string} action\n   * @return {this}\n   */\n\n\n  addAction(action) {\n    let actionToAdd;\n\n    if (typeof action === 'string') {\n      if (action.indexOf('/') >= 0) {\n        throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n      } else {\n        actionToAdd = new RawAction(action);\n      }\n    } else {\n      actionToAdd = action;\n    }\n\n    this.actions.push(actionToAdd);\n    return this;\n  }\n  /**\n   * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n   * @param {string | SDK.Transformation} tx\n   * @example\n   * import {Transformation} from \"@cloudinary/url-gen\";\n   *\n   * const transformation = new Transformation();\n   * transformation.addTransformation('w_100/w_200/w_300');\n   * @return {this}\n   */\n\n\n  addTransformation(tx) {\n    if (tx instanceof Transformation) {\n      // Concat the new actions into the existing actions\n      this.actions = this.actions.concat(tx.actions);\n    } else {\n      this.actions.push(new RawAction(tx));\n    }\n\n    return this;\n  }\n  /**\n   * @return {string}\n   */\n\n\n  toString() {\n    return this.actions.map(action => {\n      return action.toString();\n    }).filter(a => a).join('/');\n  }\n  /**\n   * @description Delivers an animated GIF.\n   * @param {AnimatedAction} animatedAction\n   * @return {this}\n   */\n\n\n  animated(animatedAction) {\n    return this.addAction(animatedAction);\n  }\n  /**\n   * @description Adds a border around the image.\n   * @param {Border} borderAction\n   * @return {this}\n   */\n\n\n  border(borderAction) {\n    return this.addAction(borderAction);\n  }\n  /**\n   * @description Adjusts the shape of the delivered image. </br>\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#distort|Shape changes and distortion effects}\n   * @param {IReshape} reshapeAction\n   * @return {this}\n   */\n\n\n  reshape(reshapeAction) {\n    return this.addAction(reshapeAction);\n  }\n  /**\n   * @description Resize the asset using provided resize action\n   * @param {ResizeSimpleAction} resizeAction\n   * @return {this}\n   */\n\n\n  resize(resizeAction) {\n    return this.addAction(resizeAction);\n  }\n  /**\n   * @desc An alias to Action Delivery.quality\n   * @param {string|number} quality\n   * @return {this}\n   */\n\n\n  quality(quality) {\n    this.addAction(new DeliveryFormatAction('q', quality));\n    return this;\n  }\n  /**\n   * @desc An alias to Action Delivery.format\n   * @param {string} format\n   * @return {this}\n   */\n\n\n  format(format) {\n    this.addAction(new DeliveryFormatAction('f', format));\n    return this;\n  }\n  /**\n   * @description Rounds the specified corners of an image.\n   * @param roundCornersAction\n   * @return {this}\n   */\n\n\n  roundCorners(roundCornersAction) {\n    return this.addAction(roundCornersAction);\n  }\n  /**\n   * @description Adds an overlay over the base image.\n   * @param {LayerAction} overlayAction\n   * @return {this}\n   */\n\n\n  overlay(overlayAction) {\n    return this.addAction(overlayAction);\n  }\n  /**\n   * @description Adds an underlay under the base image.\n   * @param {LayerAction} underlayAction\n   * @return {this}\n   */\n\n\n  underlay(underlayAction) {\n    underlayAction.setLayerType('u');\n    return this.addAction(underlayAction);\n  }\n  /**\n   * @description Defines an new user variable.\n   * @param {VariableAction} variableAction\n   * @return {this}\n   */\n\n\n  addVariable(variableAction) {\n    return this.addAction(variableAction);\n  }\n  /**\n   * @description Specifies a condition to be met before applying a transformation.\n   * @param {ConditionalAction} conditionAction\n   * @return {this}\n   */\n\n\n  conditional(conditionAction) {\n    return this.addAction(conditionAction);\n  }\n  /**\n   * @description Applies a filter or an effect on an asset.\n   * @param {SimpleEffectAction} effectAction\n   * @return {this}\n   */\n\n\n  effect(effectAction) {\n    return this.addAction(effectAction);\n  }\n  /**\n   * @description Applies adjustment effect on an asset.\n   * @param action\n   * @return {this}\n   */\n\n\n  adjust(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Rotates the asset by the given angle.\n   * @param {RotateAction} rotateAction\n   * @return {this}\n   */\n\n\n  rotate(rotateAction) {\n    return this.addAction(rotateAction);\n  }\n  /**\n   * @description Applies a pre-defined named transformation of the given name.\n   * @param {NamedTransformation} namedTransformation\n   * @return {this}\n   */\n\n\n  namedTransformation(namedTransformation) {\n    return this.addAction(namedTransformation);\n  }\n  /**\n   * @description Applies delivery action.\n   * @param deliveryAction\n   * @return {this}\n   */\n\n\n  delivery(deliveryAction) {\n    return this.addAction(deliveryAction);\n  }\n  /**\n   * @description Sets the color of the background.\n   * @param {Qualifiers.Color} color\n   * @return {this}\n   */\n\n\n  backgroundColor(color) {\n    return this.addAction(new BackgroundColor(color));\n  }\n  /**\n   * @description Adds a layer in a Photoshop document.\n   * @param action\n   * @return {this}\n   */\n\n\n  psdTools(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n   * @param action\n   * @return {this}\n   */\n\n\n  extract(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Adds a flag as a separate action.\n   * @param {Qualifiers.Flag | string} flagQualifier\n   * @return {this}\n   */\n\n\n  addFlag(flagQualifier) {\n    const action = new Action();\n    let flagToAdd = flagQualifier;\n\n    if (typeof flagQualifier === 'string') {\n      flagToAdd = new FlagQualifier(flagQualifier);\n    }\n\n    action.addQualifier(flagToAdd);\n    return this.addAction(action);\n  }\n  /**\n   * @description Inject a custom function into the image transformation pipeline.\n   * @return {this}\n   */\n\n\n  customFunction(customFunction) {\n    return this.addAction(customFunction);\n  }\n  /**\n   * Transcodes the video (or audio) to another format.\n   * @param {Action} action\n   * @return {this}\n   */\n\n\n  transcode(action) {\n    return this.addAction(action);\n  }\n  /**\n   * Applies the specified video edit action.\n   *\n   * @param {videoEditType} action\n   * @return {this}\n   */\n\n\n  videoEdit(action) {\n    return this.addAction(action);\n  }\n\n  toJson() {\n    const actions = [];\n\n    for (const action of this.actions) {\n      const json = action.toJson();\n\n      if (isErrorObject(json)) {\n        // Fail early and return an IErrorObject\n        return json;\n      }\n\n      actions.push(json);\n    }\n\n    return {\n      actions\n    };\n  }\n\n}\n\nexport { Transformation };","map":{"version":3,"names":["Action","BackgroundColor","FlagQualifier","RawAction","isErrorObject","DeliveryFormatAction","Transformation","constructor","actions","addAction","action","actionToAdd","indexOf","push","addTransformation","tx","concat","toString","map","filter","a","join","animated","animatedAction","border","borderAction","reshape","reshapeAction","resize","resizeAction","quality","format","roundCorners","roundCornersAction","overlay","overlayAction","underlay","underlayAction","setLayerType","addVariable","variableAction","conditional","conditionAction","effect","effectAction","adjust","rotate","rotateAction","namedTransformation","delivery","deliveryAction","backgroundColor","color","psdTools","extract","addFlag","flagQualifier","flagToAdd","addQualifier","customFunction","transcode","videoEdit","toJson","json"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/transformation/Transformation.js"],"sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { RawAction } from \"../internal/RawAction.js\";\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\nimport { DeliveryFormatAction } from \"../actions/delivery/DeliveryFormatAction.js\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n    constructor() {\n        this.actions = [];\n    }\n    /**\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        let actionToAdd;\n        if (typeof action === 'string') {\n            if (action.indexOf('/') >= 0) {\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n            }\n            else {\n                actionToAdd = new RawAction(action);\n            }\n        }\n        else {\n            actionToAdd = action;\n        }\n        this.actions.push(actionToAdd);\n        return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/url-gen\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n    addTransformation(tx) {\n        if (tx instanceof Transformation) {\n            // Concat the new actions into the existing actions\n            this.actions = this.actions.concat(tx.actions);\n        }\n        else {\n            this.actions.push(new RawAction(tx));\n        }\n        return this;\n    }\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.actions\n            .map((action) => {\n            return action.toString();\n        })\n            .filter((a) => a)\n            .join('/');\n    }\n    /**\n     * @description Delivers an animated GIF.\n     * @param {AnimatedAction} animatedAction\n     * @return {this}\n     */\n    animated(animatedAction) {\n        return this.addAction(animatedAction);\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n    border(borderAction) {\n        return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#distort|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n    reshape(reshapeAction) {\n        return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n    resize(resizeAction) {\n        return this.addAction(resizeAction);\n    }\n    /**\n     * @desc An alias to Action Delivery.quality\n     * @param {string|number} quality\n     * @return {this}\n     */\n    quality(quality) {\n        this.addAction(new DeliveryFormatAction('q', quality));\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.format\n     * @param {string} format\n     * @return {this}\n     */\n    format(format) {\n        this.addAction(new DeliveryFormatAction('f', format));\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n    roundCorners(roundCornersAction) {\n        return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        underlayAction.setLayerType('u');\n        return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n    conditional(conditionAction) {\n        return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n    effect(effectAction) {\n        return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n    adjust(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n    rotate(rotateAction) {\n        return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        return this.addAction(namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        return this.addAction(new BackgroundColor(color));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n    psdTools(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n    extract(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        const action = new Action();\n        let flagToAdd = flagQualifier;\n        if (typeof flagQualifier === 'string') {\n            flagToAdd = new FlagQualifier(flagQualifier);\n        }\n        action.addQualifier(flagToAdd);\n        return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        return this.addAction(customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n    transcode(action) {\n        return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        return this.addAction(action);\n    }\n    toJson() {\n        const actions = [];\n        for (const action of this.actions) {\n            const json = action.toJson();\n            if (isErrorObject(json)) {\n                // Fail early and return an IErrorObject\n                return json;\n            }\n            actions.push(json);\n        }\n        return { actions };\n    }\n}\nexport { Transformation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}