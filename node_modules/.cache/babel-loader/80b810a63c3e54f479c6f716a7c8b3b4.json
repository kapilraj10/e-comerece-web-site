{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { CHROMA_VALUE_TO_CHROMA_MODEL_ENUM, CHROMA_MODEL_ENUM_TO_CHROMA_VALUE, ACTION_TYPE_TO_QUALITY_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\n\nclass DeliveryQualityAction extends DeliveryAction {\n  /**\n   * @param {Qualifiers.Quality} qualityValue a Quality value\n   */\n  constructor(qualityValue) {\n    super('q', qualityValue.toString(), 'level');\n  }\n  /**\n   * Selet the Chroma sub sampling</br>\n   * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\n   * @param {420 | 444 | number} type The chroma sub sampling type\n   */\n\n\n  chromaSubSampling(type) {\n    this._actionModel.chromaSubSampling = CHROMA_VALUE_TO_CHROMA_MODEL_ENUM[type];\n    const qualityWithSubSampling = new QualifierValue([this._actionModel.level, type]);\n    qualityWithSubSampling.setDelimiter(':'); // We either have chroma or quantization, but not both\n\n    return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n  }\n  /**\n   * Controls the final quality by setting a maximum quantization percentage\n   * @param {number} val\n   */\n\n\n  quantization(val) {\n    this._actionModel.quantization = val;\n    const qualityWithQuantization = new QualifierValue([this._actionModel.level, `qmax_${val}`]).setDelimiter(':'); // We either have chroma or quantization, but not both\n\n    return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n  }\n\n  static fromJson(actionModel) {\n    const {\n      level,\n      chromaSubSampling,\n      quantization\n    } = actionModel;\n    const levelType = ACTION_TYPE_TO_QUALITY_MODE_MAP[level] || level;\n    const result = new this(levelType);\n\n    if (chromaSubSampling) {\n      //Turn strings like 'CHROMA_420' to 420\n      const chromaValue = CHROMA_MODEL_ENUM_TO_CHROMA_VALUE[chromaSubSampling.toUpperCase()];\n      chromaValue && result.chromaSubSampling(+chromaValue);\n    }\n\n    quantization && result.quantization(quantization);\n    return result;\n  }\n\n}\n\nexport { DeliveryQualityAction };","map":{"version":3,"names":["QualifierValue","Qualifier","DeliveryAction","CHROMA_VALUE_TO_CHROMA_MODEL_ENUM","CHROMA_MODEL_ENUM_TO_CHROMA_VALUE","ACTION_TYPE_TO_QUALITY_MODE_MAP","DeliveryQualityAction","constructor","qualityValue","toString","chromaSubSampling","type","_actionModel","qualityWithSubSampling","level","setDelimiter","addQualifier","quantization","val","qualityWithQuantization","fromJson","actionModel","levelType","result","chromaValue","toUpperCase"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryQualityAction.js"],"sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { CHROMA_VALUE_TO_CHROMA_MODEL_ENUM, CHROMA_MODEL_ENUM_TO_CHROMA_VALUE, ACTION_TYPE_TO_QUALITY_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryQualityAction extends DeliveryAction {\n    /**\n     * @param {Qualifiers.Quality} qualityValue a Quality value\n     */\n    constructor(qualityValue) {\n        super('q', qualityValue.toString(), 'level');\n    }\n    /**\n     * Selet the Chroma sub sampling</br>\n     * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\n     * @param {420 | 444 | number} type The chroma sub sampling type\n     */\n    chromaSubSampling(type) {\n        this._actionModel.chromaSubSampling = CHROMA_VALUE_TO_CHROMA_MODEL_ENUM[type];\n        const qualityWithSubSampling = new QualifierValue([this._actionModel.level, type]);\n        qualityWithSubSampling.setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n    }\n    /**\n     * Controls the final quality by setting a maximum quantization percentage\n     * @param {number} val\n     */\n    quantization(val) {\n        this._actionModel.quantization = val;\n        const qualityWithQuantization = new QualifierValue([this._actionModel.level, `qmax_${val}`]).setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n    }\n    static fromJson(actionModel) {\n        const { level, chromaSubSampling, quantization } = actionModel;\n        const levelType = ACTION_TYPE_TO_QUALITY_MODE_MAP[level] || level;\n        const result = new this(levelType);\n        if (chromaSubSampling) {\n            //Turn strings like 'CHROMA_420' to 420\n            const chromaValue = CHROMA_MODEL_ENUM_TO_CHROMA_VALUE[chromaSubSampling.toUpperCase()];\n            chromaValue && result.chromaSubSampling(+chromaValue);\n        }\n        quantization && result.quantization(quantization);\n        return result;\n    }\n}\nexport { DeliveryQualityAction };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,iCAAT,EAA4CC,iCAA5C,EAA+EC,+BAA/E,QAAsH,qCAAtH;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAN,SAAoCJ,cAApC,CAAmD;EAC/C;AACJ;AACA;EACIK,WAAW,CAACC,YAAD,EAAe;IACtB,MAAM,GAAN,EAAWA,YAAY,CAACC,QAAb,EAAX,EAAoC,OAApC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,iBAAiB,CAACC,IAAD,EAAO;IACpB,KAAKC,YAAL,CAAkBF,iBAAlB,GAAsCP,iCAAiC,CAACQ,IAAD,CAAvE;IACA,MAAME,sBAAsB,GAAG,IAAIb,cAAJ,CAAmB,CAAC,KAAKY,YAAL,CAAkBE,KAAnB,EAA0BH,IAA1B,CAAnB,CAA/B;IACAE,sBAAsB,CAACE,YAAvB,CAAoC,GAApC,EAHoB,CAIpB;;IACA,OAAO,KAAKC,YAAL,CAAkB,IAAIf,SAAJ,CAAc,GAAd,EAAmBY,sBAAnB,CAAlB,CAAP;EACH;EACD;AACJ;AACA;AACA;;;EACII,YAAY,CAACC,GAAD,EAAM;IACd,KAAKN,YAAL,CAAkBK,YAAlB,GAAiCC,GAAjC;IACA,MAAMC,uBAAuB,GAAG,IAAInB,cAAJ,CAAmB,CAAC,KAAKY,YAAL,CAAkBE,KAAnB,EAA2B,QAAOI,GAAI,EAAtC,CAAnB,EAA6DH,YAA7D,CAA0E,GAA1E,CAAhC,CAFc,CAGd;;IACA,OAAO,KAAKC,YAAL,CAAkB,IAAIf,SAAJ,CAAc,GAAd,EAAmBkB,uBAAnB,CAAlB,CAAP;EACH;;EACc,OAARC,QAAQ,CAACC,WAAD,EAAc;IACzB,MAAM;MAAEP,KAAF;MAASJ,iBAAT;MAA4BO;IAA5B,IAA6CI,WAAnD;IACA,MAAMC,SAAS,GAAGjB,+BAA+B,CAACS,KAAD,CAA/B,IAA0CA,KAA5D;IACA,MAAMS,MAAM,GAAG,IAAI,IAAJ,CAASD,SAAT,CAAf;;IACA,IAAIZ,iBAAJ,EAAuB;MACnB;MACA,MAAMc,WAAW,GAAGpB,iCAAiC,CAACM,iBAAiB,CAACe,WAAlB,EAAD,CAArD;MACAD,WAAW,IAAID,MAAM,CAACb,iBAAP,CAAyB,CAACc,WAA1B,CAAf;IACH;;IACDP,YAAY,IAAIM,MAAM,CAACN,YAAP,CAAoBA,YAApB,CAAhB;IACA,OAAOM,MAAP;EACH;;AAxC8C;;AA0CnD,SAASjB,qBAAT"},"metadata":{},"sourceType":"module"}