{"ast":null,"code":"import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\n/**\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\n\nclass DeliveryFormatAction extends DeliveryAction {\n  constructor(deliveryKey, deliveryType) {\n    super(deliveryKey, deliveryType, 'formatType');\n  }\n  /**\n   * @description Uses lossy compression when delivering animated GIF files.\n   * @return {this}\n   */\n\n\n  lossy() {\n    this._actionModel.lossy = true;\n    this.addFlag(lossy());\n    return this;\n  }\n  /**\n   * @description Uses progressive compression when delivering JPG file format.\n   * @return {this}\n   */\n\n\n  progressive(mode) {\n    if (mode instanceof ProgressiveQualifier) {\n      this._actionModel.progressive = {\n        mode: mode.getFlagValue()\n      };\n      this.addFlag(mode);\n    } else {\n      this._actionModel.progressive = {\n        mode: mode\n      };\n      this.addFlag(progressive(mode));\n    }\n\n    return this;\n  }\n  /**\n   * @description Ensures that images with a transparency channel are delivered in PNG format.\n   */\n\n\n  preserveTransparency() {\n    this._actionModel.preserveTransparency = true;\n    this.addFlag(preserveTransparency());\n    return this;\n  }\n\n  static fromJson(actionModel) {\n    const {\n      formatType,\n      lossy,\n      progressive,\n      preserveTransparency\n    } = actionModel;\n    let result;\n\n    if (formatType) {\n      result = new this('f', formatType);\n    } else {\n      result = new this('f');\n    }\n\n    if (progressive) {\n      if (progressive.mode) {\n        result.progressive(progressive.mode);\n      } else {\n        result.progressive();\n      }\n    }\n\n    lossy && result.lossy();\n    preserveTransparency && result.preserveTransparency();\n    return result;\n  }\n\n}\n\nexport { DeliveryFormatAction };","map":{"version":3,"names":["lossy","preserveTransparency","progressive","DeliveryAction","ProgressiveQualifier","DeliveryFormatAction","constructor","deliveryKey","deliveryType","_actionModel","addFlag","mode","getFlagValue","fromJson","actionModel","formatType","result"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryFormatAction.js"],"sourcesContent":["import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\n/**\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryFormatAction extends DeliveryAction {\n    constructor(deliveryKey, deliveryType) {\n        super(deliveryKey, deliveryType, 'formatType');\n    }\n    /**\n     * @description Uses lossy compression when delivering animated GIF files.\n     * @return {this}\n     */\n    lossy() {\n        this._actionModel.lossy = true;\n        this.addFlag(lossy());\n        return this;\n    }\n    /**\n     * @description Uses progressive compression when delivering JPG file format.\n     * @return {this}\n     */\n    progressive(mode) {\n        if (mode instanceof ProgressiveQualifier) {\n            this._actionModel.progressive = { mode: mode.getFlagValue() };\n            this.addFlag(mode);\n        }\n        else {\n            this._actionModel.progressive = { mode: mode };\n            this.addFlag(progressive(mode));\n        }\n        return this;\n    }\n    /**\n     * @description Ensures that images with a transparency channel are delivered in PNG format.\n     */\n    preserveTransparency() {\n        this._actionModel.preserveTransparency = true;\n        this.addFlag(preserveTransparency());\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { formatType, lossy, progressive, preserveTransparency } = actionModel;\n        let result;\n        if (formatType) {\n            result = new this('f', formatType);\n        }\n        else {\n            result = new this('f');\n        }\n        if (progressive) {\n            if (progressive.mode) {\n                result.progressive(progressive.mode);\n            }\n            else {\n                result.progressive();\n            }\n        }\n        lossy && result.lossy();\n        preserveTransparency && result.preserveTransparency();\n        return result;\n    }\n}\nexport { DeliveryFormatAction };\n"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,oBAAhB,EAAsCC,WAAtC,QAAyD,0BAAzD;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,oBAAT,QAAqC,iCAArC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAN,SAAmCF,cAAnC,CAAkD;EAC9CG,WAAW,CAACC,WAAD,EAAcC,YAAd,EAA4B;IACnC,MAAMD,WAAN,EAAmBC,YAAnB,EAAiC,YAAjC;EACH;EACD;AACJ;AACA;AACA;;;EACIR,KAAK,GAAG;IACJ,KAAKS,YAAL,CAAkBT,KAAlB,GAA0B,IAA1B;IACA,KAAKU,OAAL,CAAaV,KAAK,EAAlB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIE,WAAW,CAACS,IAAD,EAAO;IACd,IAAIA,IAAI,YAAYP,oBAApB,EAA0C;MACtC,KAAKK,YAAL,CAAkBP,WAAlB,GAAgC;QAAES,IAAI,EAAEA,IAAI,CAACC,YAAL;MAAR,CAAhC;MACA,KAAKF,OAAL,CAAaC,IAAb;IACH,CAHD,MAIK;MACD,KAAKF,YAAL,CAAkBP,WAAlB,GAAgC;QAAES,IAAI,EAAEA;MAAR,CAAhC;MACA,KAAKD,OAAL,CAAaR,WAAW,CAACS,IAAD,CAAxB;IACH;;IACD,OAAO,IAAP;EACH;EACD;AACJ;AACA;;;EACIV,oBAAoB,GAAG;IACnB,KAAKQ,YAAL,CAAkBR,oBAAlB,GAAyC,IAAzC;IACA,KAAKS,OAAL,CAAaT,oBAAoB,EAAjC;IACA,OAAO,IAAP;EACH;;EACc,OAARY,QAAQ,CAACC,WAAD,EAAc;IACzB,MAAM;MAAEC,UAAF;MAAcf,KAAd;MAAqBE,WAArB;MAAkCD;IAAlC,IAA2Da,WAAjE;IACA,IAAIE,MAAJ;;IACA,IAAID,UAAJ,EAAgB;MACZC,MAAM,GAAG,IAAI,IAAJ,CAAS,GAAT,EAAcD,UAAd,CAAT;IACH,CAFD,MAGK;MACDC,MAAM,GAAG,IAAI,IAAJ,CAAS,GAAT,CAAT;IACH;;IACD,IAAId,WAAJ,EAAiB;MACb,IAAIA,WAAW,CAACS,IAAhB,EAAsB;QAClBK,MAAM,CAACd,WAAP,CAAmBA,WAAW,CAACS,IAA/B;MACH,CAFD,MAGK;QACDK,MAAM,CAACd,WAAP;MACH;IACJ;;IACDF,KAAK,IAAIgB,MAAM,CAAChB,KAAP,EAAT;IACAC,oBAAoB,IAAIe,MAAM,CAACf,oBAAP,EAAxB;IACA,OAAOe,MAAP;EACH;;AAxD6C;;AA0DlD,SAASX,oBAAT"},"metadata":{},"sourceType":"module"}