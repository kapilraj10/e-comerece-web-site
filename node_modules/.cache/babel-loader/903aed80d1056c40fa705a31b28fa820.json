{"ast":null,"code":"import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\n\nclass Action extends ActionModel {\n  constructor() {\n    super(...arguments); // We're using map, to overwrite existing keys. for example:\n    // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n\n    this.qualifiers = new Map(); // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n    // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n    // So flags are stored separately until the very end because of that reason\n\n    this.flags = [];\n    this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n\n    this.actionTag = ''; // A custom name tag to identify this action in the future\n  }\n\n  prepareQualifiers() {}\n  /**\n   * @description Returns the custom name tag that was given to this action\n   * @return {string}\n   */\n\n\n  getActionTag() {\n    return this.actionTag;\n  }\n  /**\n   * @description Sets the custom name tag for this action\n   * @return {this}\n   */\n\n\n  setActionTag(tag) {\n    this.actionTag = tag;\n    return this;\n  }\n  /**\n   * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n   * @return {string}\n   */\n\n\n  toString() {\n    this.prepareQualifiers();\n    return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n  }\n  /**\n   * @description Adds the parameter to the action.\n   * @param {SDK.Qualifier} qualifier\n   * @return {this}\n   */\n\n\n  addQualifier(qualifier) {\n    // if string, find the key and value\n    if (typeof qualifier === 'string') {\n      const [key, value] = qualifier.toLowerCase().split('_');\n\n      if (key === 'fl') {\n        // if string qualifier is a flag, store it in the flags arrays\n        this.flags.push(new FlagQualifier(value));\n      } else {\n        // if the string qualifier is not a flag, create a new qualifier from it\n        this.qualifiers.set(key, new Qualifier(key, value));\n      }\n    } else {\n      // if a qualifier object, insert to the qualifiers map\n      this.qualifiers.set(qualifier.key, qualifier);\n    }\n\n    return this;\n  }\n  /**\n   * @description Adds a flag to the current action.\n   * @param {Qualifiers.Flag} flag\n   * @return {this}\n   */\n\n\n  addFlag(flag) {\n    if (typeof flag === 'string') {\n      this.flags.push(new FlagQualifier(flag));\n    } else {\n      if (flag instanceof FlagQualifier) {\n        this.flags.push(flag);\n      }\n    }\n\n    return this;\n  }\n\n  addValueToQualifier(qualifierKey, qualifierValue) {\n    this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n    return this;\n  }\n\n}\n\nexport { Action };","map":{"version":3,"names":["FlagQualifier","Qualifier","mapToSortedArray","ActionModel","Action","constructor","arguments","qualifiers","Map","flags","delimiter","actionTag","prepareQualifiers","getActionTag","setActionTag","tag","toString","join","addQualifier","qualifier","key","value","toLowerCase","split","push","set","addFlag","flag","addValueToQualifier","qualifierKey","qualifierValue","get","addValue"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/internal/Action.js"],"sourcesContent":["import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action extends ActionModel {\n    constructor() {\n        super(...arguments);\n        // We're using map, to overwrite existing keys. for example:\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n        this.qualifiers = new Map();\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n        // So flags are stored separately until the very end because of that reason\n        this.flags = [];\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n        this.actionTag = ''; // A custom name tag to identify this action in the future\n    }\n    prepareQualifiers() { }\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n    getActionTag() {\n        return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n    setActionTag(tag) {\n        this.actionTag = tag;\n        return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n    toString() {\n        this.prepareQualifiers();\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n    addQualifier(qualifier) {\n        // if string, find the key and value\n        if (typeof qualifier === 'string') {\n            const [key, value] = qualifier.toLowerCase().split('_');\n            if (key === 'fl') {\n                // if string qualifier is a flag, store it in the flags arrays\n                this.flags.push(new FlagQualifier(value));\n            }\n            else {\n                // if the string qualifier is not a flag, create a new qualifier from it\n                this.qualifiers.set(key, new Qualifier(key, value));\n            }\n        }\n        else {\n            // if a qualifier object, insert to the qualifiers map\n            this.qualifiers.set(qualifier.key, qualifier);\n        }\n        return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n    addFlag(flag) {\n        if (typeof flag === 'string') {\n            this.flags.push(new FlagQualifier(flag));\n        }\n        else {\n            if (flag instanceof FlagQualifier) {\n                this.flags.push(flag);\n            }\n        }\n        return this;\n    }\n    addValueToQualifier(qualifierKey, qualifierValue) {\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n        return this;\n    }\n}\nexport { Action };\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qCAA9B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAN,SAAqBD,WAArB,CAAiC;EAC7BE,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT,EADU,CAEV;IACA;;IACA,KAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB,CAJU,CAKV;IACA;IACA;;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,SAAL,GAAiB,GAAjB,CATU,CASY;;IACtB,KAAKC,SAAL,GAAiB,EAAjB,CAVU,CAUW;EACxB;;EACDC,iBAAiB,GAAG,CAAG;EACvB;AACJ;AACA;AACA;;;EACIC,YAAY,GAAG;IACX,OAAO,KAAKF,SAAZ;EACH;EACD;AACJ;AACA;AACA;;;EACIG,YAAY,CAACC,GAAD,EAAM;IACd,KAAKJ,SAAL,GAAiBI,GAAjB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIC,QAAQ,GAAG;IACP,KAAKJ,iBAAL;IACA,OAAOV,gBAAgB,CAAC,KAAKK,UAAN,EAAkB,KAAKE,KAAvB,CAAhB,CAA8CQ,IAA9C,CAAmD,KAAKP,SAAxD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIQ,YAAY,CAACC,SAAD,EAAY;IACpB;IACA,IAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;MAC/B,MAAM,CAACC,GAAD,EAAMC,KAAN,IAAeF,SAAS,CAACG,WAAV,GAAwBC,KAAxB,CAA8B,GAA9B,CAArB;;MACA,IAAIH,GAAG,KAAK,IAAZ,EAAkB;QACd;QACA,KAAKX,KAAL,CAAWe,IAAX,CAAgB,IAAIxB,aAAJ,CAAkBqB,KAAlB,CAAhB;MACH,CAHD,MAIK;QACD;QACA,KAAKd,UAAL,CAAgBkB,GAAhB,CAAoBL,GAApB,EAAyB,IAAInB,SAAJ,CAAcmB,GAAd,EAAmBC,KAAnB,CAAzB;MACH;IACJ,CAVD,MAWK;MACD;MACA,KAAKd,UAAL,CAAgBkB,GAAhB,CAAoBN,SAAS,CAACC,GAA9B,EAAmCD,SAAnC;IACH;;IACD,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIO,OAAO,CAACC,IAAD,EAAO;IACV,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MAC1B,KAAKlB,KAAL,CAAWe,IAAX,CAAgB,IAAIxB,aAAJ,CAAkB2B,IAAlB,CAAhB;IACH,CAFD,MAGK;MACD,IAAIA,IAAI,YAAY3B,aAApB,EAAmC;QAC/B,KAAKS,KAAL,CAAWe,IAAX,CAAgBG,IAAhB;MACH;IACJ;;IACD,OAAO,IAAP;EACH;;EACDC,mBAAmB,CAACC,YAAD,EAAeC,cAAf,EAA+B;IAC9C,KAAKvB,UAAL,CAAgBwB,GAAhB,CAAoBF,YAApB,EAAkCG,QAAlC,CAA2CF,cAA3C;IACA,OAAO,IAAP;EACH;;AAhF4B;;AAkFjC,SAAS1B,MAAT"},"metadata":{},"sourceType":"module"}