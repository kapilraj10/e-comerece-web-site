{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Extracts an area or multiple areas of an image, described in natural language.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass Extract extends Action {\n  constructor(prompts) {\n    super();\n    this._prompts = [];\n    this._detectMultiple = false;\n    this._invert = false;\n    this._actionModel.actionType = \"extract\";\n    this._prompts = Array.isArray(prompts) ? prompts : [prompts];\n    this._actionModel.prompts = this._prompts;\n  }\n\n  detectMultiple() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._detectMultiple = value;\n\n    if (this._detectMultiple) {\n      this._actionModel.detectMultiple = this._detectMultiple;\n    }\n\n    return this;\n  }\n\n  mode(mode) {\n    this._mode = mode;\n    this._actionModel.mode = this._mode;\n    return this;\n  }\n\n  invert() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._invert = value;\n\n    if (this._invert) {\n      this._actionModel.invert = this._invert;\n    }\n\n    return this;\n  }\n\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue().setDelimiter(\";\");\n\n    if (this._prompts.length) {\n      qualifierValue.addValue(this.preparePromptValue());\n    }\n\n    if (this._detectMultiple) {\n      qualifierValue.addValue(\"multiple_true\");\n    }\n\n    if (this._mode) {\n      qualifierValue.addValue(`mode_${this._mode}`);\n    }\n\n    if (this._invert) {\n      qualifierValue.addValue(\"invert_true\");\n    }\n\n    this.addQualifier(new Qualifier(\"e\", `extract:${qualifierValue.toString()}`));\n  }\n\n  preparePromptValue() {\n    const prompts = this._prompts;\n    const qualifierValue = new QualifierValue().setDelimiter(\";\");\n\n    if (prompts.length === 1) {\n      qualifierValue.addValue(`prompt_${prompts[0]}`);\n    } else {\n      qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\n    }\n\n    return qualifierValue;\n  }\n\n  static fromJson(actionModel) {\n    const {\n      prompts,\n      detectMultiple,\n      mode,\n      invert\n    } = actionModel;\n    const result = new this(prompts);\n\n    if (detectMultiple) {\n      result.detectMultiple(detectMultiple);\n    }\n\n    if (mode) {\n      result.mode(mode);\n    }\n\n    if (invert) {\n      result.invert(invert);\n    }\n\n    return result;\n  }\n\n}\n\nexport { Extract };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","Extract","constructor","prompts","_prompts","_detectMultiple","_invert","_actionModel","actionType","Array","isArray","detectMultiple","value","mode","_mode","invert","prepareQualifiers","qualifierValue","setDelimiter","length","addValue","preparePromptValue","addQualifier","toString","join","fromJson","actionModel","result"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Extract.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Extracts an area or multiple areas of an image, described in natural language.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Extract extends Action {\n    constructor(prompts) {\n        super();\n        this._prompts = [];\n        this._detectMultiple = false;\n        this._invert = false;\n        this._actionModel.actionType = \"extract\";\n        this._prompts = Array.isArray(prompts) ? prompts : [prompts];\n        this._actionModel.prompts = this._prompts;\n    }\n    detectMultiple(value = false) {\n        this._detectMultiple = value;\n        if (this._detectMultiple) {\n            this._actionModel.detectMultiple = this._detectMultiple;\n        }\n        return this;\n    }\n    mode(mode) {\n        this._mode = mode;\n        this._actionModel.mode = this._mode;\n        return this;\n    }\n    invert(value = false) {\n        this._invert = value;\n        if (this._invert) {\n            this._actionModel.invert = this._invert;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (this._prompts.length) {\n            qualifierValue.addValue(this.preparePromptValue());\n        }\n        if (this._detectMultiple) {\n            qualifierValue.addValue(\"multiple_true\");\n        }\n        if (this._mode) {\n            qualifierValue.addValue(`mode_${this._mode}`);\n        }\n        if (this._invert) {\n            qualifierValue.addValue(\"invert_true\");\n        }\n        this.addQualifier(new Qualifier(\"e\", `extract:${qualifierValue.toString()}`));\n    }\n    preparePromptValue() {\n        const prompts = this._prompts;\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (prompts.length === 1) {\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\n        }\n        else {\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\n        }\n        return qualifierValue;\n    }\n    static fromJson(actionModel) {\n        const { prompts, detectMultiple, mode, invert } = actionModel;\n        const result = new this(prompts);\n        if (detectMultiple) {\n            result.detectMultiple(detectMultiple);\n        }\n        if (mode) {\n            result.mode(mode);\n        }\n        if (invert) {\n            result.invert(invert);\n        }\n        return result;\n    }\n}\nexport { Extract };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}