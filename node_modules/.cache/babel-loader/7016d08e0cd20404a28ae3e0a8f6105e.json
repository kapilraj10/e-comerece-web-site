{"ast":null,"code":"import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\nimport { AudioSource } from \"./source/sourceTypes/AudioSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\n\nfunction image(publicID) {\n  return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\n\n\nfunction text(text, textStyle) {\n  return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\n\n\nfunction video(publicID) {\n  return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a AudioSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the audio to be used as a layer\n * @return {Qualifiers.Source.AudioSource}\n */\n\n\nfunction audio(publicID) {\n  return new AudioSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\n\n\nfunction subtitles(fileName) {\n  return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\n\n\nfunction fetch(remoteURL) {\n  return new FetchSource(remoteURL);\n}\n\nconst Source = {\n  image,\n  text,\n  video,\n  subtitles,\n  fetch,\n  audio\n};\nexport { Source, image, text, video, subtitles, fetch, audio };","map":{"version":3,"names":["VideoSource","ImageSource","SubtitlesSource","FetchSource","TextSource","AudioSource","image","publicID","text","textStyle","video","audio","subtitles","fileName","fetch","remoteURL","Source"],"sources":["C:/Users/DELL/OneDrive/Desktop/New folder (2)/New folder/node_modules/@cloudinary/transformation-builder-sdk/qualifiers/source.js"],"sourcesContent":["import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\nimport { AudioSource } from \"./source/sourceTypes/AudioSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\nfunction image(publicID) {\n    return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\nfunction text(text, textStyle) {\n    return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction video(publicID) {\n    return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a AudioSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the audio to be used as a layer\n * @return {Qualifiers.Source.AudioSource}\n */\nfunction audio(publicID) {\n    return new AudioSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction subtitles(fileName) {\n    return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\nfunction fetch(remoteURL) {\n    return new FetchSource(remoteURL);\n}\nconst Source = { image, text, video, subtitles, fetch, audio };\nexport { Source, image, text, video, subtitles, fetch, audio };\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,qCAA5B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,eAAT,QAAgC,yCAAhC;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,QAAf,EAAyB;EACrB,OAAO,IAAIN,WAAJ,CAAgBM,QAAhB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,IAAT,CAAcA,IAAd,EAAoBC,SAApB,EAA+B;EAC3B,OAAO,IAAIL,UAAJ,CAAeI,IAAf,EAAqBC,SAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeH,QAAf,EAAyB;EACrB,OAAO,IAAIP,WAAJ,CAAgBO,QAAhB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,KAAT,CAAeJ,QAAf,EAAyB;EACrB,OAAO,IAAIF,WAAJ,CAAgBE,QAAhB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,SAAT,CAAmBC,QAAnB,EAA6B;EACzB,OAAO,IAAIX,eAAJ,CAAoBW,QAApB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeC,SAAf,EAA0B;EACtB,OAAO,IAAIZ,WAAJ,CAAgBY,SAAhB,CAAP;AACH;;AACD,MAAMC,MAAM,GAAG;EAAEV,KAAF;EAASE,IAAT;EAAeE,KAAf;EAAsBE,SAAtB;EAAiCE,KAAjC;EAAwCH;AAAxC,CAAf;AACA,SAASK,MAAT,EAAiBV,KAAjB,EAAwBE,IAAxB,EAA8BE,KAA9B,EAAqCE,SAArC,EAAgDE,KAAhD,EAAuDH,KAAvD"},"metadata":{},"sourceType":"module"}